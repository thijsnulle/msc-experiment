{"selected_lines": [48, 50, 56, 54, 51, 59, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 54, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 52, 56, 47, 54, 46, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 56, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 49, 59, 51, 57, 56, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 47, 56, 54, 57, 52, 46, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01744365692138672, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 52, 50, 57, 46, 49, 54, 59, 48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 57, 51, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027328014373779297, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 50, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 47, 57, 49, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 57, 50, 56, 47, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 56, 47, 54, 59, 49, 57, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.7436058521270752, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 47, 59, 48, 49, 54, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 59, 47, 49, 50, 51, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 52, 50, 56, 49, 59, 57, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01744365692138672, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [59, 49, 54, 50, 47, 51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025777101516723633, "tests_passed": true, "error": null}}
{"selected_lines": [51, 52, 54, 49, 50, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025658130645751953, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 50, 57, 49, 47, 46, 51, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 47, 54, 59, 46, 52, 48, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02816605567932129, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027590036392211914, "tests_passed": true, "error": null}}
{"selected_lines": [52, 59, 48, 50, 54, 57, 46, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0002040863037109375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 59, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025829792022705078, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02563190460205078, "tests_passed": true, "error": null}}
{"selected_lines": [54, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 49, 50, 46, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 48, 57, 51, 52, 50, 46, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 49, 54, 59, 57, 47, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0009860992431640625, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [51, 48, 54, 57, 59, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 51, 56, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 52, 47, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 48, 59, 54, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 54, 49, 57, 50, 48, 56, 52, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 48, 49, 56, 54, 47, 46, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 54, 48, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 52, 51, 47, 59, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 50, 52, 48, 56, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 51, 46, 52, 56, 54, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 54, 52, 50, 56, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 52, 48, 47, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 51, 57, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 48, 50, 52, 46, 56, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.03165316581726074, "tests_passed": true, "error": null}}
{"selected_lines": [46, 59, 48, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 56, 59, 46, 49, 47, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 47, 46, 49, 56, 52, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 52, 50, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 57, 54, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 47, 50, 46, 51, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 50, 47, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 52, 57, 51, 46, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 59, 49, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 57, 54, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 59, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 49, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027410030364990234, "tests_passed": true, "error": null}}
{"selected_lines": [56, 52, 47, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027428865432739258, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 50, 56, 48, 59, 47, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 57, 56, 49, 50, 48, 46, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 47, 56, 48, 50, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 56, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 46, 54, 56, 47, 59, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 57, 49, 47, 46, 52, 54, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 46, 50, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 57, 50, 46, 48, 49, 56, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as error:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 46, 50, 56, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 56, 48, 46, 47, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now().date():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 47, 52, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 56, 50, 46, 57, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 54, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02740621566772461, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027009010314941406, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 46, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009572267532348633, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [47, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 46, 57, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 56, 50, 57, 47, 52, 49, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 59, 51, 48, 57, 50, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 46, 51, 52, 49, 56, 48, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 52, 48, 51, 47, 54, 56, 49, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 50, 59, 47, 56, 54, 48, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as err:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 57, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 52, 49, 54, 47, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 56, 51, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 46, 48, 50, 47, 49, 52, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [50, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02754688262939453, "tests_passed": true, "error": null}}
{"selected_lines": [56, 59, 50, 47, 57, 52, 54, 49, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 50, 47, 52, 56, 51, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 47, 48, 50, 51, 54, 49, 56, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 48, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025658130645751953, "tests_passed": true, "error": null}}
{"selected_lines": [54, 48, 56, 57, 52, 47, 59, 51, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 47, 54, 48, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 48, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00019097328186035156, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [52, 54, 56, 46, 48, 50, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 46, 47, 51, 48, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027376174926757812, "tests_passed": true, "error": null}}
{"selected_lines": [59, 51, 54, 48, 52, 50, 49, 57, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 49, 52, 50, 48, 51, 47, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 52, 56, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Provided date is a past date\")\n    except (TypeError, ValueError):\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 57, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 54, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 52, 59, 46, 49, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 47, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 52, 56, 54, 47, 50, 59, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 56, 52, 59, 50, 47, 57, 46, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 59, 46, 49, 57, 52, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 49, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 46, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 59, 56, 49, 52, 48, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 49, 56, 52, 48, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 47, 48, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001881122589111328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [56, 54, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025708913803100586, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 48, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as error:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [59, 47, 52, 49, 54, 56, 50, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 47, 46, 56, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026175975799560547, "tests_passed": true, "error": null}}
{"selected_lines": [48, 57, 46, 56, 51, 52, 59, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 47, 56, 46, 57, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 51, 54, 50, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025732994079589844, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48, 46, 51, 56, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 59, 51, 50, 47, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 49, 48, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025641918182373047, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 59, 51, 49, 47, 50, 48, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 57, 59, 52, 50, 51, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.30094194412231445, "tests_passed": true, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025523900985717773, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 59, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 50, 59, 47, 57, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 57, 52, 47, 49, 46, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as error:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025944232940673828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 52, 51, 59, 54, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 51, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 52, 46, 54, 56, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 59, 47, 52, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 49, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025892257690429688, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 50, 52, 47, 56, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 56, 50, 52, 46, 57, 48, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 48, 52, 56, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except (TypeError, ValueError):\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026020288467407227, "tests_passed": true, "error": null}}
{"selected_lines": [59, 47, 49, 57, 54, 48, 51, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 52, 50, 48, 54, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 47, 49, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 49, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02623295783996582, "tests_passed": true, "error": null}}
{"selected_lines": [56, 51, 46, 59, 52, 48, 57, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 48, 59, 51, 56, 46, 47, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.017363309860229492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025918245315551758, "tests_passed": true, "error": null}}
{"selected_lines": [57, 56, 46, 54, 50, 51, 59, 48, 49, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as err:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 51, 56, 54, 49, 46, 50, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 52, 54, 48, 47, 59, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 56, 48, 47, 54, 52, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 49, 52, 57, 59, 56, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 59, 52, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 54, 46, 52, 56, 48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 56, 52, 59, 51, 46, 48, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 50, 59, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 49, 57, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 54, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025732994079589844, "tests_passed": true, "error": null}}
{"selected_lines": [48, 56, 49, 51, 59, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as err:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 47, 50, 51, 57, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 51, 59, 49, 56, 57, 52, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 52, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 57, 49, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 50, 59, 51, 52, 57, 54, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 56, 52, 48, 47, 46, 59, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 54, 59, 50, 48, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 47, 54, 59, 48, 51, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 56, 52, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009618997573852539, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 59, 47, 57, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 57, 51, 52, 49, 59, 46, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 51, 47, 52, 57, 46, 56, 50, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 54, 56, 48, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 51, 54, 48, 46, 52, 57, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 46, 59, 52, 51, 54, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 51, 46, 57, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except (TypeError, ValueError):\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 47, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 59, 49, 46, 50, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 46, 52, 51, 56, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 52, 50, 49, 51, 57, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 59, 49, 56, 57, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 49, 47, 46, 50, 59, 51, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 52, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 47, 52, 46, 59, 51, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 51, 47, 57, 56, 59, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 59, 52, 50, 49, 54, 57, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 54, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02625894546508789, "tests_passed": true, "error": null}}
{"selected_lines": [57, 46, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 54, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 54, 49, 51, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 46, 56, 50, 52, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.001361846923828125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [59, 49, 56, 54, 48, 47, 52, 51, 46, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 56, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 47, 48, 50, 59, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 49, 56, 47, 51, 54, 59, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 56, 57, 46, 50, 54, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 57, 54, 49, 59, 46, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 52, 49, 46, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 46, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00019311904907226562, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 57, 54, 59, 51, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 50, 54, 48, 52, 51, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.today():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 46, 51, 56, 59, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 52, 46, 47, 56, 48, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now().date():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 57, 48, 47, 52, 50, 51, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.017363309860229492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 57, 59, 56, 52, 46, 48, 49, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 57, 50, 46, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 54, 56, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025606870651245117, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 59, 51, 54, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 59, 51, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 59, 47, 51, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 59, 50, 47, 52, 54, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46, 56, 48, 57, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date.date() < datetime.now().date():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 48, 49, 51, 47, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 54, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 56, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 57, 51, 49, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 51, 52, 54, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009495973587036133, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [57, 47, 56, 46, 59, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 47, 50, 59, 52, 46, 48, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0009932518005371094, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [57, 48, 46, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02878284454345703, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 46, 54, 49, 50, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 56, 49, 48, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 47, 50, 49, 48, 57, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 50, 47, 54, 46, 59, 51, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 48, 46, 59, 57, 52, 47, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 59, 50, 54, 48, 51, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 50, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 49, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.019268035888671875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 48, 49, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02620697021484375, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 54, 48, 51, 50, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.027688264846801758, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 49, 54, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 59, 47, 56, 54, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 46, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 48, 49, 50, 46, 51, 47, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 46, 48, 52, 51, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 47, 54, 51, 46, 52, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 59, 54, 51, 57, 56, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 59, 51, 50, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 59, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 54, 50, 47, 46, 59, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 59, 54, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 49, 51, 48, 59, 50, 52, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 59, 52, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026182889938354492, "tests_passed": true, "error": null}}
{"selected_lines": [54, 48, 59, 46, 52, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01025080680847168, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 49, 56, 50, 54, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 56, 52, 54, 57, 48, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 47, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 56, 49, 50, 59, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 54, 52, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 57, 46, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 48, 46, 54, 59, 49, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 46, 59, 56, 49, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02618575096130371, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 56, 59, 46, 49, 50, 48, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025787830352783203, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 50, 47, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 57, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 57, 56, 59, 48, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 59, 52, 51, 48, 57, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [56, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 48, 59, 46, 51, 47, 50, 49, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 51, 50, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 49, 46, 52, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0256650447845459, "tests_passed": true, "error": null}}
{"selected_lines": [54, 59, 48, 47, 50, 52, 57, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 54, 51, 50, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51, 52, 57, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 57, 48, 49, 46, 50, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 51, 52, 49, 47, 54, 57, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 50, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 59, 57, 50, 48, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 56, 57, 51, 47, 59, 46, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 56, 59, 52, 49, 50, 47, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 54, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 48, 51, 49, 46, 57, 47, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 52, 54, 49, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 57, 48, 51, 56, 49, 54, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 46, 48, 56, 59, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 56, 49, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 48, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00012087821960449219, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [59, 47, 56, 51, 50, 57, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 52, 59, 47, 48, 56, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 57, 52, 49, 48, 47, 56, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026185989379882812, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 49, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 52, 57, 51, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0012288093566894531, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [52, 50, 46, 57, 51, 56, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 48, 46, 49, 52, 59, 54, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 46, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02617192268371582, "tests_passed": true, "error": null}}
{"selected_lines": [59, 46, 54, 50, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 52, 51, 46, 56, 54, 47, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 59, 56, 48, 46, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.028700828552246094, "tests_passed": true, "error": null}}
{"selected_lines": [57, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.03511404991149902, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025722265243530273, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 56, 59, 50, 49, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 59, 54, 52, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 57, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02858114242553711, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 50, 52, 49, 48, 51, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 52, 50, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 57, 59, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 56, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 47, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 54, 57, 50, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 54, 46, 50, 52, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01025080680847168, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 49, 51, 46, 59, 47, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 54, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 54, 50, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00012087821960449219, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [52, 50, 48, 46, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 47, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [54, 46, 56, 51, 52, 57, 59, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 56, 57, 49, 47, 52, 54, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 50, 57, 54, 47, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01025080680847168, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 57, 50, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 50, 51, 56, 47, 48, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 59, 51, 46, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 52, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 54, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 56, 59, 46, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 57, 46, 49, 50, 59, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 47, 48, 50, 57, 59, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 47, 57, 54, 52, 59, 51, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 57, 48, 54, 46, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 59, 56, 54, 52, 47, 48, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 51, 49, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 57, 46, 54, 59, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0256650447845459, "tests_passed": true, "error": null}}
{"selected_lines": [47, 57, 50, 59, 56, 52, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.017363309860229492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [50, 49, 54, 52, 47, 46, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 52, 57, 48, 47, 46, 50, 49, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.017363309860229492, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00012087821960449219, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009495973587036133, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [46, 52, 47, 51, 57, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025722265243530273, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 57, 59, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 46, 54, 57, 48, 51, 47, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 56, 48, 49, 50, 57, 51, 59, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 59, 56, 52, 46, 54, 47, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 56, 47, 49, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 49, 46, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 47, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 59, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 48, 52, 46, 51, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 57, 49, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 46, 51, 47, 52, 48, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 49, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0256650447845459, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02577996253967285, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025918245315551758, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 51, 59, 54, 57, 50, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 57, 56, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 49, 56, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026206016540527344, "tests_passed": true, "error": null}}
{"selected_lines": [59, 54, 50, 52, 46, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 59, 52, 46, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02588200569152832, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 50, 48, 59, 46, 56, 54, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 56, 57, 59, 46, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 57, 52, 47, 59, 50, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 52, 56, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 54, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 54, 49, 52, 48, 47, 56, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 50, 59, 48, 51, 49, 46, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 51, 49, 48, 46, 50, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 48, 52, 54, 51, 59, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 56, 54, 46, 52, 57, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025885820388793945, "tests_passed": true, "error": null}}
{"selected_lines": [48, 57, 46, 49, 52, 59, 51, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 50, 51, 54, 56, 47, 52, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 48, 52, 49, 50, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 52, 56, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 48, 50, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02947831153869629, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 56, 50, 46, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 59, 51, 48, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 49, 52, 56, 48, 47, 46, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 46, 47, 51, 52, 59, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 48, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026102066040039062, "tests_passed": true, "error": null}}
{"selected_lines": [59, 47, 52, 57, 56, 50, 46, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 56, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025943756103515625, "tests_passed": true, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 56, 59, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 46, 50, 57, 54, 51, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 52, 46, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 48, 47, 57, 52, 51, 59, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [46, 51, 57, 47, 50, 59, 56, 48, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError:\n        raise ValueError(\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 54, 51, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 48, 50, 57, 56, 46, 51, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 56, 52, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 52, 51, 49, 50, 47, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 49, 51, 54, 57, 59, 47, 50, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 59, 47, 54, 51, 50, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 49, 59, 46, 51, 50, 52, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025849103927612305, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 50, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 46, 57, 56, 47, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 57, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 50, 51, 54, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 54, 57, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 47, 57, 46, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0009932518005371094, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 56, 57, 59, 52, 51, 48, 50, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025918245315551758, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02576279640197754, "tests_passed": true, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025523900985717773, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 52, 57, 46, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 54, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 46, 59, 54, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 59, 52, 56, 54, 46, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 52, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 46, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 49, 50, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 51, 50, 52, 48, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [54, 48, 49, 52, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 57, 54, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 57, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 47, 46, 56, 57, 52, 49, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 46, 51, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0010459423065185547, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [47, 51, 52, 46, 56, 49, 59, 57, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 47, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026445865631103516, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 57, 51, 56, 47, 48, 52, 59, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.03086400032043457, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 51, 54, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 46, 51, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 46, 50, 52, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 46, 48, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 54, 51, 49, 47, 50, 57, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 49, 59, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 50, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 54, 49, 57, 50, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 48, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 52, 57, 50, 48, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026046276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [51, 56, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 54, 57, 59, 46, 47, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 54, 52, 59, 49, 48, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 46, 50, 52, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026015043258666992, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 52, 46, 50, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025835037231445312, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 49, 57, 56, 59, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 47, 57, 50, 46, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 56, 52, 48, 57, 50, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 52, 51, 54, 50, 46, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 57, 51, 48, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 56, 49, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025769948959350586, "tests_passed": true, "error": null}}
{"selected_lines": [57, 48, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029654979705810547, "tests_passed": true, "error": null}}
{"selected_lines": [56, 48, 52, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 49, 59, 47, 50, 52, 57, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009572267532348633, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [57, 46, 56, 49, 47, 48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 52, 49, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 51, 46, 52, 57, 59, 47, 50, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 47, 46, 59, 56, 48, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 46, 48, 49, 54, 52, 56, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 51, 50, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01744365692138672, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001881122589111328, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [56, 46, 52, 50, 57, 48, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 50, 57, 52, 47, 56, 49, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009087085723876953, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 51, 57, 59, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02581477165222168, "tests_passed": true, "error": null}}
{"selected_lines": [51, 59, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 47, 59, 54, 49, 46, 48, 50, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 57, 48, 47, 56, 49, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 51, 56, 59, 50, 46, 57, 54, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 48, 50, 51, 56, 49, 46, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 47, 50, 54, 49, 46, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 47, 49, 57, 59, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 48, 51, 57, 50, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 51, 49, 54, 59, 46, 57, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 46, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 48, 49, 50, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 47, 50, 48, 57, 52, 54, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 49, 54, 48, 47, 57, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01744365692138672, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 46, 56, 52, 57, 47, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 56, 50, 46, 52, 51, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029677152633666992, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 59, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(\"Room\", \"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 54, 46, 51, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025751590728759766, "tests_passed": true, "error": null}}
{"selected_lines": [48, 59, 46, 57, 52, 50, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 57, 50, 51, 59, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 59, 52, 57, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 54, 57, 56, 46, 47, 51, 52, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 47, 50, 56, 51, 49, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 57, 47, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029304981231689453, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0261838436126709, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 46, 59, 49, 51, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 59, 49, 52, 51, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 59, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026128768920898438, "tests_passed": true, "error": null}}
{"selected_lines": [57, 49, 59, 56, 52, 46, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 54, 46, 57, 48, 50, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 59, 57, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 59, 46, 52, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025658130645751953, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 47, 48, 46, 51, 52, 54, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x='Room', y='Booking Status', rot=45)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 59, 47, 56, 57, 48, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 49, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026073694229125977, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 54, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 59, 48, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 49, 48, 47, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 47, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 52, 50, 49, 54, 56, 48, 59, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 59, 56, 54, 57, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026348114013671875, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025774002075195312, "tests_passed": true, "error": null}}
{"selected_lines": [57, 48, 49, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 56, 59, 57, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 56, 59, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02623295783996582, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 47, 54, 59, 49, 57, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 57, 48, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 52, 47, 56, 50, 59, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 54, 52, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 56, 46, 59, 49, 48, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02610492706298828, "tests_passed": true, "error": null}}
{"selected_lines": [57, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 49, 59, 50, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 46, 52, 51, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 51, 47, 54, 59, 57, 52, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 52, 51, 48, 59, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 56, 57, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57, 50, 46, 54, 52, 47, 59, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 57, 50, 51, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 54, 52, 48, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 49, 51, 46, 47, 59, 57, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 49, 47, 46, 48, 56, 52, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 46, 49, 47, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 48, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026118993759155273, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 57, 59, 47, 50, 54, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025641918182373047, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 57, 56, 50, 54, 51, 47, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 49, 50, 52, 54, 59, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 46, 47, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02621603012084961, "tests_passed": true, "error": null}}
{"selected_lines": [46, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 54, 47, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 59, 56, 54, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025708913803100586, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 49, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 47, 46, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.04213404655456543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 56, 59, 49, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 46, 50, 56, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 57, 48, 49, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 52, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 57, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [54, 47, 51, 52, 56, 50, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 48, 51, 57, 49, 59, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 59, 52, 46, 48, 56, 50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 49, 54, 52, 48, 51, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 57, 49, 47, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 52, 57, 56, 51, 50, 46, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 52, 48, 46, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029679059982299805, "tests_passed": true, "error": null}}
{"selected_lines": [59, 48, 57, 47, 56, 54, 46, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 57, 56, 47, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029381990432739258, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 49, 59, 54, 48, 52, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 50, 48, 46, 52, 51, 54, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 57, 59, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 54, 57, 50, 48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 57, 48, 54, 52, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 56, 57, 46, 51, 54, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 48, 56, 49, 59, 51, 47, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 46, 59, 54, 47, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 51, 50, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00012087821960449219, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [59, 51, 54, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 52, 54, 51, 56, 57, 48, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 47, 50, 46, 56, 59, 57, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [48, 57, 59, 49, 50, 56, 47, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026192903518676758, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01744365692138672, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [54, 51, 57, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 56, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 51, 47, 56, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 52, 49, 50, 57, 51, 59, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 51, 52, 50, 49, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02582693099975586, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 56, 51, 52, 57, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 57, 54, 50, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 56, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 54, 47, 57, 52, 46, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02563190460205078, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 54, 59, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 57, 48, 46, 59, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 57, 59, 56, 54, 52, 49, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 54, 51, 52, 56, 47, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 50, 46, 48, 52, 49, 47, 51, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 59, 57, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 51, 49, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 57, 56, 49, 52, 59, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 46, 56, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 46, 57, 50, 52, 54, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 50, 51, 56, 59, 46, 49, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 49, 50, 52, 51, 54, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 46, 50, 49, 52, 48, 57, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 57, 48, 54, 51, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 46, 57, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 56, 49, 59, 54, 47, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025829792022705078, "tests_passed": true, "error": null}}
{"selected_lines": [48, 54, 57, 47, 56, 49, 59, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().replace(tzinfo=datetime.utcnow()):\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025885820388793945, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 49, 57, 48, 46, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 50, 54, 57, 56, 51, 47, 46, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026180028915405273, "tests_passed": true, "error": null}}
{"selected_lines": [56, 47, 48, 49, 51, 54, 52, 46, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029422760009765625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 54, 52, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 47, 59, 46, 49, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 47, 49, 46, 50, 51, 57, 56, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(x='Room', y='Booking Status', kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001659393310546875, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [56, 50, 48, 49, 51, 46, 54, 59, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 50, 46, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 56, 47, 48, 46, 52, 51, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025647878646850586, "tests_passed": true, "error": null}}
{"selected_lines": [57, 54, 49, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 54, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 50, 46, 49, 57, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 56, 51, 46, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 51, 57, 49, 56, 47, 46, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 51, 50, 56, 54, 59, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 47, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 47, 51, 46, 48, 56, 52, 57, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 52, 57, 47, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 49, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026471853256225586, "tests_passed": true, "error": null}}
{"selected_lines": [46, 57, 56, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 50, 49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 57, 46, 49, 47, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\n    except (TypeError, ValueError):\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02584981918334961, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 51, 48, 54, 57, 56, 50, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as err:\n        raise ValueError(\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 57, 50, 59, 47, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025526046752929688, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.01025080680847168, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [46, 50, 54, 51, 47, 52, 59, 56, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026245832443237305, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 59, 54, 46, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 52, 49, 48, 59, 51, 46, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 57, 59, 54, 56, 46, 47, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 51, 48, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [49, 59, 56, 57, 52, 47, 51, 46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 46, 47, 56, 51, 52, 59, 54, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 48, 50, 54, 57, 52, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 56, 52, 46, 47, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 48, 56, 47, 57, 51, 52, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 48, 57, 56, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 59, 47, 56, 57, 46, 52, 54, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = list(booking_data.items())\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 56, 59, 54, 50, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00017786026000976562, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [56, 46, 54, 47, 51, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 49, 47, 46, 48, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 49, 56, 57, 52, 59, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 57, 59, 56, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.00017786026000976562, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [57, 50, 56, 47, 52, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025935888290405273, "tests_passed": true, "error": null}}
{"selected_lines": [59, 57, 46, 51, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 47, 52, 48, 49, 50, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 59, 54, 48, 50, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 59, 54, 48, 47, 51, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [56, 51, 54, 50, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date can't be in past!\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 47, 49, 48, 57, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 57, 46, 47, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(5, 5), title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 47, 57, 49, 51, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 52, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 47, 56, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date should not be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 57, 46, 52, 48, 50, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError as err:\n        raise ValueError(\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 50, 48, 57, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02577996253967285, "tests_passed": true, "error": null}}
{"selected_lines": [50, 59, 56, 46, 54, 49, 57, 48, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 59, 47, 56, 52, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 48, 57, 47, 51, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {ROOMS[i]: booking_data[ROOMS[i]] if ROOMS[i] in booking_data else \"Not Listed\" for i in range(5)}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02631092071533203, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 59, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 47, 56, 54, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 59, 56, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 51, 49, 46, 59, 54, 56], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 48, 56, 57, 47, 50, 59, 54, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 51, 52, 49, 56, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 59, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 54, 56, 52, 51, 49, 57, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 57, 46, 56, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 52, 48, 56, 51, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 46, 57, 47, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 51, 46, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 54, 52, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [56, 54, 59, 46, 57, 47, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 46, 49, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 49, 46, 48, 57, 47, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 49, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 57, 48, 56, 46, 49, 54, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(sort=False)\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 52, 50, 56, 51, 59, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 56, 48, 50, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 57, 47, 54, 52, 56, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, '%Y-%m-%d')\n        if date <= datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 56, 50, 54, 57, 52, 48, 47, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 48, 59, 51, 46, 47, 52, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", legend=False, figsize=(10, 8))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 51, 46, 56, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 50, 47, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 48, 49, 50, 59, 57, 47, 56, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 51, 54, 56, 46, 59, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025841951370239258, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 51, 52, 56, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.009214401245117188, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [54, 56, 46, 49, 47, 59, 51, 48, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 59, 50, 51, 56, 54, 48, 46, 47, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.today():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(\"The date string is invalid. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 50, 56, 46, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.029507160186767578, "tests_passed": true, "error": null}}
{"selected_lines": [57, 50, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 56, 50, 52, 47, 46, 57, 49, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 52, 54, 56, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 51, 54, 46, 50, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Date must follow the 'yyyy-mm-dd' format. {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 51, 54, 47, 48, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 46, 54, 51, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now().date():\n            raise ValueError(\"Invalid date: cannot be in the past.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(title=\"Booking Status Report\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 46, 48, 52, 50, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be a past date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 56, 46, 49, 54, 51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(15, 8),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 54, 46, 52, 50, 47, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide a valid date in yyyy-mm-dd format: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025641918182373047, "tests_passed": true, "error": null}}
{"selected_lines": [50, 52, 46, 48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 46, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 47, 52, 49, 57, 50, 59, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 50, 54, 51, 59, 47, 52, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date <= datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError as e:\n        raise ValueError(\"Date is invalid or not in the correct format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 59, 54, 52, 49, 46, 56, 48, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date should not be in the past\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, title=\"Room Booking Status\", figsize=(10, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now().date():\n            raise ValueError(\n    except ValueError as error:\n        raise ValueError(f\"Invalid date format. Please enter a date in the format 'yyyy-mm-dd': {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 47, 49, 52, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now().date():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind=\"bar\", figsize=(14, 2),\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 59, 50, 49, 56, 46, 47, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 59, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 56, 49, 50, 51, 47, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(10, 10), color=\"red\", fontsize=10)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 51, 59, 49, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(10, 10), color=[\"r\", \"g\", \"b\", \"y\", \"m\", \"c\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 54, 59, 57, 50, 56, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.today().date():\n            raise ValueError(f\"Date cannot be a past date: {date}\")\n    except ValueError:\n        raise ValueError(\"Date must be in the format yyyy-mm-dd and is not a valid date.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=45, color=[\"green\", \"red\", \"blue\", \"orange\", \"purple\"], legend=True, fontsize=10, figsize=(10, 5), ax=ax)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 54, 48, 57, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = sns.barplot(x=\"Room\", y=\"Booking Status\", data=report_df)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True, dropna=False)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025658130645751953, "tests_passed": true, "error": null}}
{"selected_lines": [51, 54, 56, 49, 50, 57, 52, 48, 47], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", color=[\"red\", \"green\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 52, 56, 47, 54, 46, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in past!\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame(booking_data, columns=[\"Booking Status\"])\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 57, 56, 50, 49, 51, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please provide the date as yyyy-mm-dd. {e}\")\n    report_data = {room: booking_data.get(room, \"Not Listed\") for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Past dates not supported.\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. The date should be in format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026279926300048828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 57, 49, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = pd.DataFrame({\"Booking Status\": []}, index=pd.Index(ROOMS, name=\"Room\"))\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(figsize=(8, 4), legend=False, title=\"Booking Status\", fontsize=14)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 59, 51, 46, 56, 57, 52, 54, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError as e:\n        raise ValueError(\"Date is not valid. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 50, 51, 48, 59, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Invalid date: date cannot be in the past\")\n    except ValueError:\n        raise ValueError(\"Invalid date string. Please provide a date in the format yyyy-mm-dd.\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", figsize=(12, 2), rot=0)\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Booking Status Report\", figsize=(12, 5))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 50, 52, 51, 59, 56, 49, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date format. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 47, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 56, 48, 59, 46, 57, 51, 52, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 59, 57, 56, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02629566192626953, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 49, 46, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as err:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 47, 56, 57, 54, 50, 52, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot.bar(figsize=(12, 4), color=[\"#4C7837\", \"#2B3113\", \"#81913E\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date string: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 59, 49, 54, 51, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date string: {date_str} - {e}\")\n    report_data = pd.DataFrame(booking_data)\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [50, 46, 56, 47, 59, 48, 51, 54, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"{e}. The input date must be in the following format: yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.030527114868164062, "tests_passed": true, "error": null}}
{"selected_lines": [49, 56, 54, 47, 46, 50, 52, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=f\"Room Booking Status for {date_str}\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025761127471923828, "tests_passed": true, "error": null}}
{"selected_lines": [57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.025523900985717773, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 51, 56, 46, 47, 50, 59, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date string: \" + str(e))\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 56, 49, 48, 47, 51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 6), ylim=4)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 52, 51, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 52, 56, 47, 51, 54, 49, 50, 57, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as error:\n        raise ValueError(\"Invalid date format: \" + str(e)) from e\n    report_data = {room: \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar(x=\"Room\", y=\"Booking Status\")\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 57, 52, 50, 54, 51, 49, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Provided date is a past date\")\n    except ValueError as err:\n        raise ValueError(\"Invalid date string. Please provide a valid date in yyyy-mm-dd format.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Room Bookings for {}\".format(date_str))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 50, 51, 54, 48, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError as e:\n        raise ValueError(\"Incorrect date format. Expected yyyy-mm-dd.\")\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar(title=\"Room Booking Status Report\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(stacked=True, figsize=(10, 5), title=\"Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 56, 48, 51, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date cannot be in the past\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {\"Room\": ROOMS, \"Booking Status\": []}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 51, 57, 49, 54], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = []\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(rot=0, legend=False, ylabel=\"Booking Status\", title=\"Room Booking Status\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is not in future.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [59, 50, 52, 54, 47, 56, 46, 51, 57, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must be future date.\")\n    except ValueError as e:\n        raise ValueError(\"Please provide a valid date in the format yyyy-mm-dd.\")\n    report_data = {\"Room\": ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].plot(kind=\"bar\")\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [57, 48, 47, 49, 59, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Cannot process past dates\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 51, 57, 54, 52, 50, 59, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\").date()\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError as err:\n        raise ValueError(f\"Invalid date format: {date_str}. Please provide a date in the format 'yyyy-mm-dd'.\")\n    report_data = {room: booking_data[room] if room in booking_data else \"Not Listed\" for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = plt.bar([room for room in ROOMS], [booking_status for room, booking_status in zip(ROOMS, report_df.Booking_Status)])\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .sort_index(ascending=False)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 49, 57, 52], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.today():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError as e:\n        raise ValueError(\"Invalid date format. Please provide a valid date in the format 'yyyy-mm-dd'.\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Room Bookings\")\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.02803826332092285, "tests_passed": true, "error": null}}
{"selected_lines": [56, 49, 54, 57], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df[\"Booking Status\"].value_counts().plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(20, 15))\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 54, 59, 47, 57, 48, 46], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"The date provided must be in future\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 52, 57, 50], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date.date() < datetime.now().date():\n            raise ValueError(\"Date must be a future date\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format. Please use the following format: yyyy-mm-dd.\\nError message: {e}\")\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.026089906692504883, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 51, 57, 48, 59], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date must not refer to a past date.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {room: booking_data[room].lower() for room in ROOMS}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(10, 5), color=[\"blue\", \"red\"])\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 51], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date <= datetime.now():\n            raise ValueError(\"Date must be in the future.\")\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 52, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = (\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(kind=\"bar\", title=\"Booking Statuses for \" + date_str)\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [56, 57, 59, 54, 52, 46, 49], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\"Date is in the past. Please provide a future date.\")\n    except ValueError:\n        raise ValueError(f\"Invalid date: {e}\") from e\n    report_data = [[room, booking_data.get(room, \"Not Listed\")] for room in ROOMS]\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.plot(kind='bar', legend=False, rot=0, title=\"Room Booking Report\", figsize=(10, 5))\n        report_df[\"Booking Status\"]\n        .value_counts(normalize=True)\n        .plot(\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 54, 50, 56, 57, 51, 48], "result": {"code": "import pandas as pd\nfrom datetime import datetime\n\n# Constants\nROOMS = [\"Room1\", \"Room2\", \"Room3\", \"Room4\", \"Room5\"]\n\ndef task_func(date_str, booking_data):\n    \"\"\"\n    This function generates a status report of room bookings for a specified date\n    and displays a bar plot representing the booking statuses of various rooms.\n    It validates the provided date, compiles a booking status report, and visualizes\n    the data in a bar plot.\n\n    Parameters:\n    - date_str (str): The date for which the booking status needs to be checked,\n                      in \"yyyy-mm-dd\" format. The function validates this date.\n    - booking_data (dict): A dictionary with room names as keys and booking statuses\n                           as values. The keys should match the rooms listed in the ROOMS constant.\n\n    Returns:\n    - DataFrame: A pandas DataFrame containing booking status for each room.\n    - matplotlib.pyplot.Axes: A matplotlib Axes object for the bar plot of booking statuses.\n\n    Raises:\n    - ValueError: Raised in two scenarios:\n                  1. If `date_str` does not follow the \"yyyy-mm-dd\" format or is not a valid date.\n                  2. If `date_str` refers to a past date.\n\n    Requirements:\n    - pandas\n    - datetime\n\n    Example:\n    >>> future_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    >>> booking_info = {\"Room1\": \"Booked\", \"Room2\": \"Available\"}\n    >>> report_df, ax = task_func(future_date, booking_info)\n    >>> print(report_df)\n        Room Booking Status\n    0  Room1         Booked\n    1  Room2      Available\n    2  Room3     Not Listed\n    3  Room4     Not Listed\n    4  Room5     Not Listed\n    \"\"\"\n    # Validate the date string\n    try:\n        date = datetime.strptime(date_str, \"%Y-%m-%d\")\n        if date < datetime.now():\n            raise ValueError(\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {e}\")\n    report_data = {}\n    report_df = pd.DataFrame(report_data, columns=[\"Room\", \"Booking Status\"])\n    # Create a bar plot of the booking statuses\n    ax = report_df.pivot_table(index=\"Room\", values=\"Booking Status\", aggfunc=\"count\").plot.bar()\n        report_df[\"Booking Status\"]\n        .value_counts()\n        .plot.bar()\n    )\n    return report_df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
