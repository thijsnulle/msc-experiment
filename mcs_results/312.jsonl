{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.00427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.10097098350524902, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0008499622344970703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.10097098350524902, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.00427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0008499622344970703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11705994606018066, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.00427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.003677845001220703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.00427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.003677845001220703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0008969306945800781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0008499622344970703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11705994606018066, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005331039428710938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.01610708236694336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0008969306945800781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.02181696891784668, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0.0, 1.0) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots()[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.015453815460205078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.01610708236694336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008900165557861328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return (distribution, ax)", "compilation_passed": true, "time": 0.10097098350524902, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0010421276092529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, alpha=0.5, edgecolor='k', linewidth=0, color='b', density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0072629451751708984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca().hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.007077693939208984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.normalvariate(0, 0.2) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.11470413208007812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.027013063430786133, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.01610708236694336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor=\"black\")\n    return distribution, ax", "compilation_passed": true, "time": 0.007230043411254883, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.01610708236694336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True, color='red', label='Gauss distribution')\n    return distribution, ax", "compilation_passed": true, "time": 0.022650957107543945, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')\n    return distribution, ax", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.01610708236694336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1, DISTRIBUTION_SIZE)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.0008311271667480469, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, density=True)[0]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, density=True)\n    return distribution, ax", "compilation_passed": true, "time": 0.02640223503112793, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.axes()\n    return distribution, ax", "compilation_passed": true, "time": 0.0038518905639648438, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.normalvariate(0, 1)  # Generate a Gaussian distribution\n    ax = plt.subplots(figsize=(6, 6))[1]\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.02638697624206543, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.gca()\n    return distribution, ax", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.13290715217590332, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins)\n    return distribution, ax", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.060884952545166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(111)\n    return distribution, ax", "compilation_passed": true, "time": 0.015707969665527344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for i in range(DISTRIBUTION_SIZE)]\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.10005807876586914, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = []\n    ax = plt.hist(distribution, bins=bins, edgecolor='black')[2]\n    return distribution, ax", "compilation_passed": true, "time": 0.04197502136230469, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = random.gauss(0, 1)\n    ax = plt.subplot()\n    return distribution, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import random\nimport matplotlib.pyplot as plt\n\n# Constants\nDISTRIBUTION_SIZE = 1000\n\ndef task_func(bins=30):\n    \"\"\"\n    Generate a Gaussian distribution and plot its histogram.\n\n    Parameters:\n    - bins (int, optional): Number of bins for the histogram. Default is 30.\n\n    Returns:\n    - tuple: A tuple containing the distribution list and the Axes patch object of the histogram plot.\n\n    Requirements:\n    - random\n    - matplotlib.pyplot\n\n    Example:\n    >>> random.seed(0)\n    >>> distribution, ax = task_func()\n    >>> len(ax.patches) == 30\n    True\n    >>> len(distribution)\n    1000\n    >>> plt.close()\n    \"\"\"\n    distribution = [random.gauss(0, 1) for _ in range(DISTRIBUTION_SIZE)]\n    ax = plt.subplot(1, 1, 1)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010859966278076172, "tests_passed": true, "error": null}}
