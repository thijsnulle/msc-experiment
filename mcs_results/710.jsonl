{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 24, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008536100387573242, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005101919174194336, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 20, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 24, 22, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 24, 23, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 22, 21, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 20, 24, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 25, 24, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 25, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 20, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005074024200439453, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 25, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 23, 25, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 20, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008095026016235352, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 25, 22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 24, 23, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.004985809326171875, "tests_passed": true, "error": null}}
{"selected_lines": [20, 24, 21, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 22, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 20, 22, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 21, 25, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 20, 21, 22, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 20, 23, 22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00493621826171875, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20, 23, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24, 20, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 22, 21, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [23, 20, 22, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 25, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 25, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005101919174194336, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22, 23, 24, 25, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 21, 24, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 25, 21, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 24, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 23, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 22, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [20, 24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [23, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005101919174194336, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 20, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 22, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 24, 23, 20, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20, 25, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0073893070220947266, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21, 20, 22, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 22, 21, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 23, 20, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008266925811767578, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 21, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 21, 24, 25, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 21, 22, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 22, 20, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [20, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 22, 23, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 24, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0049610137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 25, 22, 21, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 24, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 23, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 20, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 23, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0073430538177490234, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 22, 20, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24, 23, 25, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [25, 21, 22, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 23, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.004985809326171875, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20, 25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008536100387573242, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 23, 22, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00836491584777832, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0073893070220947266, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 21, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 24, 20, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 20, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 25, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 23, 25, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20, 24, 21, 22, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 20, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 21, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 24, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 21, 20, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 21, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005023002624511719, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [25, 24, 21, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.002363920211791992, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 20, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 21, 20, 24, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 25, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 22, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 24, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 21, 24, 20, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20, 25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008536100387573242, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 23, 21, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 21, 23, 22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 22, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 22, 24, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 23, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0050508975982666016, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008723974227905273, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 20, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007919073104858398, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.004985809326171875, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 21, 20, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.004985809326171875, "tests_passed": true, "error": null}}
{"selected_lines": [20, 22, 24, 23, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20, 24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 22, 25, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 20, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [23, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005029201507568359, "tests_passed": true, "error": null}}
{"selected_lines": [24, 22, 20, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 25, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24, 20, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 25, 24, 21, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [23, 24, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20, 25, 22, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [25, 24, 20, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21, 25, 22, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007863044738769531, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 20, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 21, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 24, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values[:, :-1]\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24, 21, 25, 23, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [25, 22, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 22, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0073893070220947266, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20, 24, 23, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0077970027923583984, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007812023162841797, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 25, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 23, 24, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20, 22, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 23, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24, 22, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007919073104858398, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 23, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 21, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [25, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21, 24, 22, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit(df).transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23, 25, 21, 20, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20, 25, 24, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler(feature_range=(0, 1)).fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24, 23, 25, 20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.iloc[:, :].values.astype(float)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005590915679931641, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 20, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0049610137939453125, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_dict('records')\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.0024230480194091797, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [22, 24, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00422978401184082, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit(data).transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00545811653137207, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler().fit_transform(df)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008427858352661133, "tests_passed": true, "error": null}}
{"selected_lines": [22, 20, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005074024200439453, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, sep=',')\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = MinMaxScaler()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24, 21, 23, 25], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.008518218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [21, 25, 24, 23], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.005660057067871094, "tests_passed": true, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [22, 24, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path, index_col=False)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [24, 20, 22, 25, 21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [21], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007266044616699219, "tests_passed": true, "error": null}}
{"selected_lines": [23, 20, 25, 21, 24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.copy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [24], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0022819042205810547, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [21, 23, 22], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.004985809326171875, "tests_passed": true, "error": null}}
{"selected_lines": [20], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data_path):\n    \"\"\"\n    Normalizes a dataset from a .csv file.\n    \n    Parameters:\n    - data_path (str): The path to the csv data file.\n\n    Returns:\n    - df (DataFrame): The normalized dataset.\n\n    Requirements:\n    - pandas\n    - sklearn\n    \n    Example:\n    >>> df = task_func('path_to_data_file.csv')\n    \"\"\"\n    df = pd.read_csv(data_path)\n    data = df.to_numpy()\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    df = pd.DataFrame(data, columns=df.columns)\n    return df", "compilation_passed": true, "time": 0.007665872573852539, "tests_passed": true, "error": null}}
