{"selected_lines": [37, 41, 36, 40, 33, 39, 35, 42, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 33, 41, 35, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 39, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 36, 39, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 34, 33, 37, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34, 40, 43, 36, 35, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0018270015716552734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 34, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014243125915527344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 42, 39, 34, 40, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 42, 40, 41, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.001280069351196289, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 34, 36, 41, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00469207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 34, 42, 40, 33, 37, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005262851715087891, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0015070438385009766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 35, 33, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 33, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 37, 33, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011099100112915039, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 33, 40, 43, 37, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 37, 42, 33, 40, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 37, 35, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0013241767883300781, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 35, 36, 40, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.004019021987915039, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 43, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 43, 34, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.00397491455078125, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 36, 40, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.011783123016357422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 41, 43, 40, 37, 35, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014567375183105469, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 36, 37, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 41, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 43, 39, 36, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39, 40, 33, 37, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004405975341796875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 39, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 36, 40, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013341903686523438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 37, 41, 43, 33, 42, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 42, 37, 39, 33, 41, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 35, 34, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 42, 37, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 36, 40, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013341903686523438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 42, 40, 41, 37, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0028531551361083984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 36, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0019788742065429688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 33, 41, 43, 42, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 37, 36, 39, 34, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 40, 35, 36, 33, 42, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 37, 35, 39, 41, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0019829273223876953, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39, 40, 36, 37, 43, 34, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34, 36, 41, 37, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 36, 37, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 34, 42, 41, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 39, 40, 43, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005388021469116211, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 34, 37, 35, 42, 43, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0016629695892333984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 40, 33, 42, 36, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0018932819366455078, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 35, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 36, 34, 42, 35, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 39, 36, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40, 43, 39, 41, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0050580501556396484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 33, 35, 37, 36, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 41, 40, 35, 33, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 40, 35, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004800081253051758, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 37, 36, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004842042922973633, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 37, 34, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 33, 34, 37, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 34, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 40, 41, 37, 43, 42, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.00446629524230957, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33, 42, 40, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 35, 39, 33, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 39, 33, 36, 42, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0015778541564941406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 43, 39, 41, 42, 40, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 39, 40, 42, 36, 41, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 34, 41, 37, 35, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 43, 34, 35, 37, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 42, 43, 35, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 33, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010491132736206055, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 37, 36, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004608154296875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010556936264038086, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 43, 33, 34, 36, 40, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 40, 36, 41, 43, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 34, 39, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 34, 33, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 39, 33, 36, 43, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 43, 35, 36, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 40, 39, 41, 35, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 35, 41, 36, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 33, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010297060012817383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 41, 40, 39, 36, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 39, 34, 36, 35, 40, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010582923889160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 36, 35, 37, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 35, 39, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 34, 36, 41, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00469207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.008616924285888672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 42, 36, 40, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0031270980834960938, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010582923889160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 43, 41, 36, 42, 37, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 41, 33, 36, 43, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 43, 36, 37, 42, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 35, 36, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004312992095947266, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010212182998657227, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 40, 43, 39, 36, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 39, 42, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0043621063232421875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 42, 43, 39, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 43, 42, 37, 39, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014710426330566406, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 39, 37, 33, 40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 35, 43, 34, 40, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 42, 37, 34, 35, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004127979278564453, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.010864973068237305, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005192995071411133, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 41, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 34, 37, 33, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 35, 42, 36, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 35, 41, 42, 43, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 39, 37, 33, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 39, 40, 36, 41, 42, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0016162395477294922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 42, 35, 36, 37, 40, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 35, 36, 42, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0015969276428222656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 39, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 42, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.005160808563232422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 42, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.001550912857055664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.008616924285888672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 42, 36, 43, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0012459754943847656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.015346050262451172, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 37, 42, 36, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0029931068420410156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 35, 37, 33, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 35, 43, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0043141841888427734, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34, 41, 43, 33, 42, 40, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.015346050262451172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 34, 43, 41, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 43, 41, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 33, 43, 41, 37, 39, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 35, 33, 36, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 41, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 42, 37, 41, 43, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 33, 37, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0012137889862060547, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 34, 39, 43, 40, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004351139068603516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 35, 40, 41, 33, 37, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 33, 34, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 34, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 34, 36, 40, 42, 33, 37, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.006381034851074219, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 33, 36, 40, 35, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004376888275146484, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0012822151184082031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 36, 39, 33, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005687236785888672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 34, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014488697052001953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 39, 42, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 39, 36, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0014619827270507812, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 43, 37, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 33, 43, 34, 35, 40, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010163068771362305, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40, 33, 42, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.001302957534790039, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 39, 41, 36, 43, 40, 34, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 34, 36, 40, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.004602193832397461, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 35, 34, 33, 41, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004400968551635742, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 41, 40, 33, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.010411977767944336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 43, 34, 39, 40, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 36, 35, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 43, 39, 34, 35, 37, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 36, 43, 34, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 35, 37, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 43, 39, 40, 41, 36, 35, 34, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 42, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004613161087036133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 43, 37, 34, 33, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 36, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 34, 41, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004442930221557617, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 35, 36, 43, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 41, 40, 33, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 42, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004613161087036133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 35, 43, 42, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 36, 42, 40, 39, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004689931869506836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 39, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 39, 35, 37, 34, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005363941192626953, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005262851715087891, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 42, 37, 33, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 37, 33, 41, 42, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 37, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 42, 41, 40, 33, 34, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 36, 40, 41, 39, 43, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 41, 40, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 40, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 34, 36, 33, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 43, 37, 35, 36, 34, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [36, 41, 34, 39, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011412858963012695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 35, 40, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 36, 42, 41, 43, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 37, 33, 36, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010513782501220703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 42, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 34, 42, 41, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 43, 39, 40, 37, 35, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 33, 41, 40, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 39, 43, 40, 33, 34, 36, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 42, 41, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 42, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 36, 37, 40, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 33, 37, 39, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 37, 35, 33, 40, 36, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 41, 34, 37, 40, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.006651163101196289, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 34, 42, 36, 35, 37, 41, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 34, 36, 43, 37, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 37, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 33, 43, 39, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40, 34, 35, 42, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004606008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 39, 42, 35, 40, 41, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 43, 36, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005262851715087891, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 36, 40, 37, 43, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 43, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 37, 33, 39, 41, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 41, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004367828369140625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 39, 41, 35, 36, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 43, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43, 37, 33, 35, 41, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004351139068603516, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 39, 42, 40, 34, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0015671253204345703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 40, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.004152059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 33, 35, 39, 34, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 43, 35, 42, 40, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 41, 42, 40, 33, 35, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 41, 43, 39, 42, 34, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36, 37, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 43, 35, 42, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 42, 41, 37, 39, 40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0042989253997802734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0012891292572021484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004271030426025391, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.012140989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 42, 33, 39, 35, 40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 41, 35, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 41, 37, 43, 40, 39, 34, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 40, 36, 37, 43, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004776954650878906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 41, 34, 39, 36, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 34, 36, 41, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00469207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 33, 42, 39, 34, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005493879318237305, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010212182998657227, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 43, 39, 40, 41, 34, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010417938232421875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 43, 42, 33, 34, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 34, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0045337677001953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 34, 39, 35, 33, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 37, 39, 42, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0027027130126953125, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 35, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004767179489135742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 36, 40, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013341903686523438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 41, 42, 43, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 33, 39, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 42, 43, 34, 37, 35, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015380382537841797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 35, 40, 34, 43, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 43, 34, 37, 41, 39, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 39, 35, 42, 34, 36, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 40, 43, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 33, 42, 43, 34, 40, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.002996206283569336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010270833969116211, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.01065206527709961, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010385274887084961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 43, 40, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [35, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0013728141784667969, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011099100112915039, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 37, 34, 36, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 42, 33, 41, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 33, 37, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010447978973388672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 42, 39, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005139350891113281, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010385274887084961, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 39, 40, 37, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0015020370483398438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 39, 43, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 43, 39, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 43, 35, 37, 40, 34, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004853725433349609, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004351139068603516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 36, 40, 39, 34, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011099100112915039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 42, 33, 40, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 34, 43, 41, 33, 37, 39, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 37, 36, 41, 42, 43, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014269351959228516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 34, 42, 40, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0048351287841796875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 37, 40, 41, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010212182998657227, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 42, 35, 36, 43, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 40, 42, 34, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 39, 43, 40, 42, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004927873611450195, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 40, 43, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 33, 42, 36, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0018932819366455078, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0054018497467041016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 36, 37, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 41, 35, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015759468078613281, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 35, 42, 33, 34, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 34, 43, 42, 35, 36, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 33, 40, 34, 35, 39, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010556936264038086, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 33, 37, 41, 34, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 39, 42, 40, 33, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 33, 40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.010864973068237305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 43, 37, 41, 34, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 37, 34, 33, 39, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 41, 34, 40, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 39, 37, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.004148006439208984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 43, 37, 34, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0050542354583740234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 39, 37, 33, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004927873611450195, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 36, 35, 41, 34, 43, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0056378841400146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 41, 40, 34, 39, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 42, 40, 35, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004800081253051758, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 36, 40, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004951000213623047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 37, 39, 40, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 40, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 36, 42, 33, 35, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 43, 40, 36, 35, 41, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 39, 33, 40, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 36, 34, 33, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 42, 43, 41, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 43, 35, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 43, 33, 41, 39, 35, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34, 42, 35, 41, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.001680135726928711, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010491132736206055, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0048828125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 39, 36, 41, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0049037933349609375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 43, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004287004470825195, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 34, 36, 43, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00518488883972168, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 40, 42, 39, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 35, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0015802383422851562, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010622024536132812, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 37, 35, 34, 39, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 37, 35, 43, 34, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 34, 36, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010513782501220703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 41, 35, 34, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00518488883972168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40, 35, 43, 39, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 33, 36, 35, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 42, 40, 39, 35, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 37, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004668235778808594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0019390583038330078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 41, 34, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0032472610473632812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 33, 37, 40, 43, 35, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013980865478515625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 35, 37, 42, 40, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 37, 40, 42, 39, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 36, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 43, 42, 35, 41, 40, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 36, 40, 37, 42, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0016019344329833984, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34, 42, 35, 41, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.001680135726928711, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 40, 41, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0016682147979736328, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 40, 43, 42, 39, 41, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010417938232421875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 42, 37, 39, 41, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 37, 42, 35, 34, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 41, 35, 37, 43, 33, 42, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 39, 42, 37, 40, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as err:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014009475708007812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0011868476867675781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 42, 36, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 41, 35, 42, 37, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013346672058105469, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37, 39, 35, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 43, 36, 33, 40, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 40, 33, 36, 41, 37, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 37, 41, 33, 42, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.003965139389038086, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 34, 35, 42, 33, 37, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.015346050262451172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 40, 39, 42, 34, 36, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as err:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 42, 43, 36, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0011911392211914062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 33, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 37, 43, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 42, 39, 33, 35, 40, 41, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 43, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 35, 40, 36, 39, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004405975341796875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 39, 35, 40, 43, 36, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 40, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0040929317474365234, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 34, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.004294872283935547, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36, 37, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 41, 35, 33, 43, 37, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 41, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 42, 34, 37, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.00693202018737793, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 41, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.004042148590087891, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 40, 36, 42, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 43, 39, 33, 35, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 39, 40, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 33, 34, 36, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 39, 33, 35, 43, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41, 37, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.001743316650390625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 33, 37, 41, 39, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010556936264038086, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 34, 36, 41, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00469207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00518488883972168, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 43, 37, 33, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 41, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004225969314575195, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.005141019821166992, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 42, 40, 35, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004800081253051758, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 43, 37, 42, 33, 34, 40, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.01077413558959961, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 35, 33, 34, 36, 43, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 42, 41, 35, 43, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.012140989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 42, 36, 39, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 43, 40, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004893064498901367, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.005532026290893555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 37, 39, 34, 41, 36, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00441288948059082, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 34, 42, 33, 36, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 36, 34, 43, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 36, 41, 42, 39, 37, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 41, 42, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 35, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014598369598388672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 34, 39, 36, 33, 42, 37, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 42, 35, 39, 36, 33, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 37, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004462003707885742, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 33, 43, 35, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010443925857543945, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004526853561401367, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 37, 40, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 42, 39, 37, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 43, 40, 42, 33, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 41, 37, 33, 43, 39, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 42, 41, 35, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43, 35, 40, 39, 37, 42, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 35, 33, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004657745361328125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 35, 33, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004657745361328125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 42, 37, 40, 39, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 37, 40, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004326820373535156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 39, 36, 37, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.01055002212524414, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 34, 33, 40, 43, 39, 41, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 34, 40, 35, 41, 36, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 34, 35, 42, 41, 40, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0027801990509033203, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015032291412353516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 34, 33, 36, 43, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 39, 36, 34, 41, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 41, 33, 39, 42, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 43, 41, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 34, 43, 33, 36, 41, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 36, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015168190002441406, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 42, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 36, 40, 33, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 39, 42, 37, 43, 34, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 42, 36, 40, 37, 43, 39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010582923889160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 36, 39, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0014421939849853516, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 37, 33, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 43, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.015346050262451172, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 39, 42, 35, 37, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 35, 42, 41, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 35, 39, 33, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 35, 37, 39, 36, 40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 41, 42, 36, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 39, 33, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 42, 40, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 34, 41, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.004231929779052734, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 41, 36, 40, 42, 35, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [35, 43, 34, 36, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 43, 37, 35, 34, 39, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013890266418457031, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010417938232421875, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 43, 35, 34, 33, 40, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 43, 34, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 36, 35, 40, 39, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 36, 39, 37, 40, 43, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 36, 39, 35, 34, 33, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010622024536132812, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 43, 40, 33, 39, 34, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.00518488883972168, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 35, 34, 40, 42, 37, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.015346050262451172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 37, 39, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015408992767333984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 43, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0012891292572021484, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 42, 43, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [35, 33, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.012140989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 41, 40, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 33, 40, 35, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 43, 42, 37, 39, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014710426330566406, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 39, 42, 43, 36, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 33, 42, 34, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 37, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015032291412353516, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 33, 39, 34, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010311126708984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 42, 41, 39, 35, 40, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 41, 39, 40, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004873991012573242, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 43, 36, 39, 34, 35, 41, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 35, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36, 39, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 34, 37, 39, 33, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 41, 33, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 36, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 33, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 41, 34, 36, 35, 42, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010498046875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 42, 34, 39, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 33, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 41, 43, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0017919540405273438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 43, 41, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.004251956939697266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 41, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 33, 36, 43, 41, 34, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 41, 40, 39, 33, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 39, 37, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 34, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 36, 40, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 42, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004829883575439453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 37, 35, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 42, 39, 37, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004271030426025391, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 36, 35, 42, 39, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 35, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 36, 39, 35, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 35, 36, 34, 33, 37, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 41, 40, 36, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014188289642333984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 36, 34, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004506111145019531, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 42, 37, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 33, 37, 34, 43, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 43, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 34, 35, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 37, 34, 35, 33, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 43, 39, 37, 35, 41, 36, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 43, 41, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004405975341796875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 35, 37, 42, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0016069412231445312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 40, 36, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 40, 42, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 34, 33, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 36, 33, 34, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0051000118255615234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 42, 35, 36, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.002794027328491211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0051839351654052734, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 35, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 39, 37, 33, 40, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 40, 33, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.00535893440246582, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.010866880416870117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 40, 39, 37, 35, 34, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.005228996276855469, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 35, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.001463174819946289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 36, 40, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013341903686523438, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 43, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 35, 41, 33, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [42, 35, 37, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 42, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 34, 37, 40, 33, 43, 39, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 42, 35, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 36, 33, 35, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 41, 34, 36, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 41, 37, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 40, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004601716995239258, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [43, 35, 41, 40, 33, 39, 37, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 42, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 42, 35, 33, 36, 41, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 35, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 41, 35, 33, 39, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 43, 34, 35, 39, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 33, 40, 36, 39, 43, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 42, 36, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 41, 37, 39, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.001743316650390625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 37, 33, 34, 39, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 42, 40, 33, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 35, 39, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 41, 33, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010582923889160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 42, 37, 35, 36, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36, 37, 35, 34, 33, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 35, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014278888702392578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 41, 34, 33, 35, 36, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 43, 34, 35, 42, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0012242794036865234, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010212182998657227, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 41, 42, 39, 43, 34, 40, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 41, 33, 34, 35, 39, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 41, 40, 35, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 37, 36, 41, 34, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.001463174819946289, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 35, 42, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010689020156860352, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 43, 36, 33, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 39, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive file: {json_file}. Error: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.012140989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 39, 35, 36, 40, 42, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 36, 43, 39, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 36, 41, 39, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 42, 36, 41, 37, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 41, 35, 36, 40, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013179779052734375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.004226207733154297, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 43, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 41, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 40, 37, 39, 36, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015408992767333984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 36, 35, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 37, 35, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 34, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 43, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0013728141784667969, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 41, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 35, 34, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 39, 43, 41, 36, 42, 35, 37, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010582923889160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 43, 40, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.004680156707763672, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 43, 35, 40, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 43, 35, 36, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 40, 34, 33, 35, 36, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.001264810562133789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 37, 41, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 33, 42, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 41, 37, 33, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 37, 39, 36, 33, 40, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>def task_func(directory, backup_dir='backup'):", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 34, 35, 43, 37, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 35, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 41, 36, 40, 43, 39, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 43, 36, 34, 35, 40, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f'{directory}/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 33, 41, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 43, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 33, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 35, 41, 33, 36, 37, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 43, 41, 37, 33, 42, 40, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 33, 35, 41, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 43, 40, 33, 34, 37, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 41, 37, 34, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0014190673828125, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010936737060546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 39, 42, 40, 36, 33, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 33, 37, 36, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011049985885620117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39, 34, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as err:\n            error_message = f\"Error moving {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004209995269775391, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 39, 36, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.004222869873046875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 39, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 36, 42, 34, 40, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 40, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.011099100112915039, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 42, 43, 35, 33, 37, 40, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0013911724090576172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 39, 37, 41, 35, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 39, 43, 33, 40, 41, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as err:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (os.path.exists(archive_dir), error_messages)<|endoftext|># 1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 43, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving '{json_file}' to '{archive_dir}': {str(e)}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0013113021850585938, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010513782501220703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(directory + '/*.json')\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010163068771362305, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 36, 40, 42, 37, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40, 33, 37, 41, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 41, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 33, 39, 34, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as err:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 41, 42, 43, 39, 36, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 37, 33, 40, 42, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as err:\n            error_message = f\"Error moving file '{json_file}' to archive: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 36, 33, 34, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0051000118255615234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 43, 33, 36, 35, 37, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except shutil.Error as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004329204559326172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 33, 42, 43, 36, 37, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 33, 42, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 35, 37, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 33, 42, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 36, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 42, 43, 36, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>from utils import print_args", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 39, 35, 40, 37, 43, 41, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 40, 34, 36, 43, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except OSError as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 40, 41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.001313924789428711, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 33, 34, 36, 43, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 34, 39, 37, 42, 35, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 43, 39, 41, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages", "compilation_passed": true, "time": 0.00435185432434082, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 33, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 43, 36, 35, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(f\"{directory}/*.json\")\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.02043318748474121, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0048351287841796875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 40, 43, 41, 39, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}': {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 39, 33, 36, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 39, 34, 40, 35, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 36, 35, 43, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return True, error_messages<|endoftext|>import datetime", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 43, 40], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010523080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 33, 40, 41, 37, 43, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 42, 33, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Error moving file: {json_file}\\n{e}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010843038558959961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 41, 43, 34, 39, 36, 42, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 43, 39, 42, 34, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.004876136779785156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 42, 35, 41, 37, 34, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return len(json_files) > 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0045931339263916016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 39, 33, 37, 34, 41, 36], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to move {json_file}: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 40, 42, 37, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return bool(not error_messages), error_messages<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 37, 33], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return len(json_files) == len(error_messages), error_messages<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 40, 43, 34, 37, 41, 42], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as e:\n            error_message = f\"Error moving file: {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return True, error_messages", "compilation_passed": true, "time": 0.0012328624725341797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 40, 42, 33, 39, 34, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"{json_file} could not be archived: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.005494117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 41, 40, 33, 39, 43, 42, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except shutil.Error as err:\n            error_message = f\"{json_file} failed to move: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 41, 39, 37, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = f\"Failed to move {json_file} to archive: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 34, 36, 41, 43, 39, 35], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0012111663818359375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.016392946243286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 43, 33, 41, 34, 37], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.mkdir(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Failed to archive {os.path.basename(json_file)}: {e}\"\n            error_messages.append(error_message)\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 42, 43], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f'Unable to move {json_file} due to {str(e)}'\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 36, 42, 33, 43, 41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"An error occurred while moving {json_file} to {archive_dir}: {e}\"\n            error_messages.append(error_message)\n    return (os.path.isdir(archive_dir), error_messages)<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 35, 43, 34], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.isdir(directory):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '**', '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n    return (len(json_files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 40, 42, 39], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except Exception as e:\n            error_message = str(e)\n            error_messages.append(error_message)\n    return (not len(error_messages), error_messages)", "compilation_passed": true, "time": 0.004680156707763672, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import os\nimport glob\nimport shutil\n\ndef task_func(directory, archive_dir='archive'):\n    \"\"\"\n    Archive all JSON files in a given directory by moving them to a specified archive directory.\n\n    Parameters:\n    directory (str): The directory where the JSON files are located.\n    archive_dir (str): The directory to which the JSON files will be archived. Defaults to 'archive'.\n\n    Returns:\n    tuple: A tuple containing a boolean value and a list of error messages.\n           The boolean is True if all files are successfully moved, and False otherwise.\n           The list contains error messages for each file that failed to move.\n\n    Requirements:\n    - os\n    - glob\n    - shutil\n\n    Example:\n    >>> import tempfile\n    >>> temp_dir = tempfile.mkdtemp()\n    >>> files = ['file1.json', 'file2.json', 'file3.json']\n    >>> for file in files:\n    ...     with open(os.path.join(temp_dir, file), 'w') as f:\n    ...         _ = f.write(\"Dummy content for testing.\")\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> task_func(temp_dir, backup_dir)\n    (True, [])\n    \"\"\"\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n        except Exception as e:\n            error_message = f\"Error moving file '{json_file}' to the archive directory: {e}\"\n            error_messages.append(error_message)\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.010297060012817383, "tests_passed": true, "error": null}}
