{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [26, 30, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007561206817626953, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007604837417602539, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 30, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005589962005615234, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007582902908325195, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01640605926513672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007472991943359375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 28, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df.loc[:, target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007346153259277344, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00844120979309082, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df.loc[:, target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 29, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0056879520416259766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005506038665771484, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005598783493041992, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007472991943359375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007763862609863281, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 30, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.005551338195800781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007474184036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005589008331298828, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007031679153442383, "tests_passed": true, "error": null}}
{"selected_lines": [26, 30, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0055999755859375, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005570888519287109, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005589008331298828, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007485151290893555, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005598783493041992, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00844120979309082, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007485151290893555, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.01688671112060547, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 26, 30, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005598783493041992, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01640605926513672, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0071561336517333984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007485151290893555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007526874542236328, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007700920104980469, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.01688671112060547, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 30, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00844120979309082, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0075702667236328125, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007472991943359375, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005249977111816406, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006994962692260742, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.005551338195800781, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007501840591430664, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01640605926513672, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.005650997161865234, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005679130554199219, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01510310173034668, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005589008331298828, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 29, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007031679153442383, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007582902908325195, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007363080978393555, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 26, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005598783493041992, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0073850154876708984, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 26, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007639169692993164, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007452964782714844, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007474184036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df.loc[:, target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00795888900756836, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007604837417602539, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df.loc[:, target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007086753845214844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007520914077758789, "tests_passed": true, "error": null}}
{"selected_lines": [26, 30, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 30, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 28, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00746607780456543, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007485151290893555, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014171838760375977, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0059299468994140625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 30, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26, 28, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007604837417602539, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005668163299560547, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007763862609863281, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 30, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007719993591308594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 27, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007520914077758789, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005282163619995117, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005873203277587891, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0071561336517333984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00755000114440918, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007031679153442383, "tests_passed": true, "error": null}}
{"selected_lines": [26, 30, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005597114562988281, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00541996955871582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007582902908325195, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017159223556518555, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.017598867416381836, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005679130554199219, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.01688671112060547, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 29, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.007753849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.target\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0071561336517333984, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007501840591430664, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007498979568481445, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00755000114440918, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005668163299560547, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 28, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007654905319213867, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02190375328063965, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007700920104980469, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns[:-1])]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005692005157470703, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01640605926513672, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016117095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005825996398925781, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:df.shape[1] - 1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005126953125, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.018167972564697266, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop([target], axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0055789947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007700920104980469, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005589008331298828, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015706777572631836, "tests_passed": true, "error": null}}
{"selected_lines": [28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target], axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007501840591430664, "tests_passed": true, "error": null}}
{"selected_lines": [28, 27, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.0054399967193603516, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.DataFrame.squeeze(df[target])\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005506038665771484, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005136013031005859, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015444278717041016, "tests_passed": true, "error": null}}
{"selected_lines": [26, 28, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007474184036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 29, 26, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015276908874511719, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.014076948165893555, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.00844120979309082, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007143259048461914, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [28, 29, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005815029144287109, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015234947204589844, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005501985549926758, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 26, 28, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.iloc[:, 0:-1]\n    y = pd.Series(df[target])  \n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007031679153442383, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.016093969345092773, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [27, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression().fit(X, y)\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.007529020309448242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]  # drop target variable\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0054628849029541016, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 29, 30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df['feature'].values\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.015130758285522461, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02550029754638672, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [26, 27, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005506038665771484, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns.difference([target])]  # Excluding target variable from X\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.02031421661376953, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, df.columns != target]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.022735118865966797, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [27, 26, 29, 28], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df.loc[:, target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27, 29, 28, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)  # Don't forget the missing return!", "compilation_passed": true, "time": 0.01688671112060547, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[list(df.columns)[:-1]]\n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.028036117553710938, "tests_passed": true, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = pd.Series(df[target])  \n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.01594710350036621, "tests_passed": true, "error": null}}
{"selected_lines": [26, 27, 30, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(target, axis=1)  # axis=1 is default, if there is only one feature\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 27, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[[\"feature\"]]  # Explicitly using pd\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = pd.DataFrame.drop(df, target, axis=1)  \n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.021120071411132812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 26, 27, 29], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.drop(columns=[target])\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005521059036254883, "tests_passed": true, "error": null}}
{"selected_lines": [27, 28, 30, 26], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[df.columns[:-1]]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.005489826202392578, "tests_passed": true, "error": null}}
{"selected_lines": [26, 29, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df[['feature']]\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 26, 27], "result": {"code": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df, target):\n    \"\"\"\n    Perform a linear regression analysis on a given DataFrame.\n    \n    Parameters:\n    - df (pd.DataFrame): The pandas DataFrame.\n    - target (str): The target variable.\n    \n    Returns:\n    - score (float): The R-squared score of the model.\n\n    Requirements:\n    - pandas\n    - sklearn\n\n    Example:\n    >>> import numpy as np\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame({'feature': np.random.rand(100), 'target': np.random.rand(100)})  # Explicitly using pd\n    >>> r_squared = task_func(df, 'target')\n    >>> print(r_squared)\n    0.0011582111228732872\n    \"\"\"\n    X = df.loc[:, 'feature']\n    y = df[target]\n    model = LinearRegression()\n    model.fit(X, y)\n    return model.score(X, y)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
