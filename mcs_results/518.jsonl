{"selected_lines": [46, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 51, 45, 43, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 46, 40, 51, 48, 38, 41, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 41, 43, 51, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 44, 42, 47, 49, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 49, 43, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51, 48, 43, 40, 45, 49, 39, 41, 46, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 39, 41, 42, 45, 47, 46, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.004656791687011719, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 40, 39, 44, 41, 38, 43, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) == 0:\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 41, 40, 44, 48, 42, 46, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"array should be a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 45, 47, 40, 46, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 41, 48, 39, 46, 47, 43, 51, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 44, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 41, 43, 40, 39, 42, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 49, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 45, 38, 44, 43, 40, 41, 47, 48, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033512115478515625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0030601024627685547, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 40, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 42, 49, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 41, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.00882720947265625, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 46, 51, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033011436462402344, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 38, 45, 49, 46, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"array should be a list\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 46, 51, 49, 45, 43, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 46, 45, 49, 38, 39, 47, 42, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0067250728607177734, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007740020751953125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 51, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 41, 51, 39, 46, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 46, 48, 45, 38, 44, 41, 47, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError\n    if not array:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 46, 41, 48, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 51, 42, 48, 38, 44, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 49, 39, 40, 44, 41, 45, 43, 42, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008105039596557617, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 44, 40, 48, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 45, 42, 46, 51, 48, 44, 40, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 44, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 42, 48, 39, 40, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"array should be a list\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.009320974349975586, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [44, 47, 43, 42, 39, 41, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007328033447265625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 41, 49, 46, 51, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 49, 48, 38, 40, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031571388244628906, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 43, 47, 39, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 44, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 42, 40, 51, 45, 48, 49, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"array is not a list\")\n    if not array:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 51, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 42, 43, 49, 46, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 47, 41, 45, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 41, 45, 38, 43, 39, 48, 44, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not isinstance(array[0], list):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 43, 45, 40, 48, 47, 51, 41, 46, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 49, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 39, 45, 46, 41, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError('array is not a list')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 44, 49, 41, 48, 45, 43, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003282785415649414, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031709671020507812, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 47, 51, 45, 42, 40, 49, 38, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"array should be a list\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 38, 49, 48, 39, 47, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"The input must be a 2D list.\")\n    if len(array) < 2:\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 47, 38, 45, 41, 49, 43, 44, 40, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 41, 51, 43, 39, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 45, 43, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032618045806884766, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 38, 47, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 41, 45, 43, 38, 40, 48, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 39, 41, 45, 46, 49, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 43, 45, 39, 40, 44, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 43, 39, 38, 48, 47, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008244037628173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 49, 42, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 43, 49, 51, 42, 44, 40, 48, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 39, 49, 47, 42, 45, 43, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 38, 40, 39, 46, 49, 48, 51, 41, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003129243850708008, "tests_passed": true, "error": null}}
{"selected_lines": [48, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 41, 45, 46, 48, 38, 49, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 41, 47, 39, 44, 40, 43, 49, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input is not a list.\")\n    if not array:\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 48, 41, 40, 38, 49, 44, 45, 42, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input should be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003153085708618164, "tests_passed": true, "error": null}}
{"selected_lines": [40, 51, 48, 39, 43, 46, 41, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('array is not a list')\n    if len(array) < 2:\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 48, 49, 45, 46, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 42, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 39, 47, 45, 43, 40, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031681060791015625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 46, 48, 40, 39, 47, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 38, 39, 47, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 49, 51, 40, 45, 42, 38, 39, 43, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 41, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 51, 48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 38, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003233194351196289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 51, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 48, 47, 45, 41, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 48, 41, 38, 45, 43, 40, 42, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 46, 47, 41, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 38, 39, 48, 42, 47, 44, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 45, 41, 40, 51, 49, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 40, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0072858333587646484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 40, 41, 49, 48, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list\")\n    if not array:\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 47, 51, 43, 45, 39, 42, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 38, 51, 44, 42, 47, 45, 46, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031328201293945312, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 47, 49, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 42, 48, 43, 40, 44, 49, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 43, 45, 40, 42, 44, 51, 38, 47, 41, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError('array is not a list')\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 49, 41, 45, 48, 51, 42, 40, 38, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"input must be a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 46, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003116130828857422, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 44, 45, 51, 49, 42, 47, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 42, 51, 40, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031380653381347656, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 49, 38, 48, 42, 44, 39, 45, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 46, 40, 47, 39, 38, 49, 44, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 48, 40, 46, 45, 41, 39, 51, 43, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError('array is not a list')\n    if len(array) == 0:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 40, 46, 49, 44, 51, 39, 38, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 39, 45, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 38, 40, 44, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 48, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 51, 48, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 42, 43, 49, 45, 48, 47, 38, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 51, 46, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 40, 39, 47, 46, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 41, 38, 44, 47, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 45, 46, 51, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 44, 51, 46, 40, 48, 42, 49, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not array:\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 44, 38, 41, 48, 40, 42, 45, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 42, 41, 47, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0036118030548095703, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 40, 39, 41, 45, 48, 44, 43, 49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 38, 43, 48, 47, 39, 41, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 49, 41, 48, 47, 40, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 45, 39, 43, 41, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 40, 44, 39, 45, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 38, 39, 41, 49, 45, 48, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 41, 47, 43, 42, 45, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 49, 39, 42, 46, 45, 48, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 51, 42, 45, 38, 46, 40, 39, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 49, 41, 40, 48, 38, 39, 43, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0067250728607177734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 44, 38, 49, 40, 43, 51, 46, 48, 42, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 42, 49, 43, 44, 46, 47, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 40, 44, 42, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007826805114746094, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 51, 39, 42, 41, 44, 40, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 48, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032167434692382812, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 39, 43, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 45, 48, 47, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 45, 48, 44, 38, 49, 42, 43, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 45, 38, 41, 40, 43, 47, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 40, 45, 47, 49, 41, 38, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003155946731567383, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 45, 46, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 39, 38, 49, 48, 41, 42, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 48, 47, 51, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 40, 49, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 45, 47, 46, 44, 41, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 38, 43, 48, 44, 42, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError('The input must be a list.')\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 39, 44, 43, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 39, 46, 49, 48, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 42, 41, 44, 49, 51, 45, 38, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 47, 42, 51, 48, 43, 39, 40, 45, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"The input must be a 2D list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 46, 44, 45, 47, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 39, 47, 51, 41, 49, 43, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 48, 51, 38, 44, 49, 39, 45, 40, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 38, 48, 39, 40, 51, 42, 46, 44, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 48, 41, 49, 51, 44, 47, 39, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 46, 51, 45, 49, 48, 41, 39, 42, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError('The input must be a list.')\n    if not array:\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 44, 43, 47, 38, 49, 41, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 41, 38, 48, 49, 43, 45, 47, 44, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0075190067291259766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 42, 45, 51, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032248497009277344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003267049789428711, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.009295225143432617, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [51, 39, 42, 49, 38, 43, 47, 41, 45, 46, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0075550079345703125, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 49, 38, 43, 48, 45, 41, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 48, 43, 44, 47, 49, 40, 51, 45, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.009268999099731445, "tests_passed": true, "error": null}}
{"selected_lines": [43, 48, 41, 47, 49, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [43, 45, 38, 46, 41, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010728836059570312, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 44, 48, 45, 40, 41, 43, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 2:\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031287670135498047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 48, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007299184799194336, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 41, 46, 51, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 45, 40, 46, 47, 41, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 40, 47, 39, 45, 41, 49, 42, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 51, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 44, 40, 39, 48, 45, 51, 42, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"input must be a list\")\n    if len(array) != 2:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 46, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 45, 51, 41, 40, 44, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 39, 40, 45, 46, 38, 48, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 51, 39, 41, 48, 43, 40, 47, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('array is not a list')\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007772922515869141, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0077800750732421875, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 49, 48, 51, 43, 47, 39, 40, 42, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 39, 47, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 47, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 47, 43, 38, 39, 51, 45, 41, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 41, 47, 51, 49, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 48, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 40, 48, 38, 49, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 41, 48, 47, 38, 40, 42, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 46, 39, 40, 49, 47, 38, 43, 48, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 40, 38, 41, 43, 48, 45, 46, 47, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 40, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003144979476928711, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 42, 40, 41, 38, 47, 45, 39, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"array should be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 51, 39, 48, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 44, 42, 39, 49, 41, 47, 40, 51, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 51, 46, 48, 49, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 39, 45, 44, 42, 51, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 44, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032629966735839844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 42, 43, 46, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 47, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49, 47, 42, 51, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 40, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 47, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 49, 42, 44, 46, 41, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 48, 49, 39, 42, 38, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 38, 43, 41, 46, 44, 48, 40, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 46, 45, 41, 39, 49, 48, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 49, 51, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 40, 43, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array:\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 49, 39, 45, 38, 46, 43, 40, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 49, 44, 38, 51, 43, 47, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51, 46, 48, 45, 39, 38, 43, 41, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 40, 48, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 46, 43, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008105039596557617, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45, 48, 39, 40, 41, 49, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 49, 40, 45, 51, 42, 43, 41, 38, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not array:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003328084945678711, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 45, 42, 46, 51, 49, 43, 48, 44, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 48, 42, 51, 46, 47, 39, 40, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"The input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003131866455078125, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 42, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 44, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003161191940307617, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 38, 47, 51, 46, 40, 48, 45, 43, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 39, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 42, 43, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 45, 40, 49, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 47, 44, 48, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 38, 49, 51, 44, 41, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 40, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 51, 44, 46, 45, 40, 42, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 49, 47, 40, 46, 51, 43, 41, 45, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 49, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 46, 47, 42, 43, 51, 48, 38, 41, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42, 44, 47, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 51, 38, 43, 48, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 43, 46, 38, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 41, 43, 42, 49, 47, 46, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 41, 38, 51, 44, 39, 45, 46, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 43, 47, 39, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007525920867919922, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 38, 51, 46, 47, 45, 41, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 38, 42, 49, 40, 51, 41, 46, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 45, 43, 51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 46, 43, 40, 47, 48, 42, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input should be a list.\")\n    if not array:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 38, 48, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 41, 39, 47, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 45, 47, 39, 48, 41, 44, 46, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 48, 40, 39, 45, 47, 43, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 41, 38, 44, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 42, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033359527587890625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 46, 51, 44, 45, 41, 42, 40, 38, 47, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 43, 39, 45, 51, 49, 48, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 39, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 47, 48, 51, 40, 46, 43, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 42, 44, 41, 38, 47, 45, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 41, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 49, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0077550411224365234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 51, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033609867095947266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0037240982055664062, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 45, 44, 39, 38, 42, 49, 40, 51, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) != 2:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 39, 47, 46, 38, 44, 51, 40, 43, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 2:\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [51, 44, 40, 38, 43, 42, 48, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 51, 49, 42, 39, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 44, 47, 42, 45, 38, 46, 51, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 46, 47, 49, 51, 41, 42, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 38, 49, 44, 40, 45, 41, 48, 47, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"The input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 47, 49, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 45, 51, 46, 42, 49, 38, 41, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 47, 44, 51, 41, 45, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 43, 42, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('The input must be a list.')\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 44, 46, 40, 51, 48, 42, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 43, 44, 42, 38, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 47, 43, 42, 38, 45, 44, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 38, 45, 39, 48, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 40, 45, 39, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 38, 47, 40, 51, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 45, 42, 39, 47, 48, 43, 40, 44, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 42, 48, 45, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033359527587890625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 44, 41, 40, 39, 49, 46, 45, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 38, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003495931625366211, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 42, 48, 51, 49, 47, 40, 39, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) == 0:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007332801818847656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 38, 44, 43, 45, 51, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 39, 38, 45, 42, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031838417053222656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 43, 42, 45, 44, 51, 48, 39, 47, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not array:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 43, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033578872680664062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 48, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 45, 42, 49, 48, 46, 41, 39, 47, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError('array is not a list')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 38, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 46, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 48, 43, 40, 47, 46, 51, 44, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 47, 49, 46, 51, 45, 42, 41, 43, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"input must be a list\")\n    if not array:\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 47, 42, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 43, 48, 38, 41, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 51, 42, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 43, 41, 49, 44, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 40, 47, 38, 42, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 47, 40, 39, 48, 42, 49, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 40, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 45, 39, 47, 43, 44, 46, 48, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"array should be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 48, 43, 39, 44, 51, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 45, 48, 40, 39, 41, 42, 51, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 46, 44, 40, 45, 49, 42, 48, 43, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0036118030548095703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 40, 41, 48, 49, 38, 45, 44, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033249855041503906, "tests_passed": true, "error": null}}
{"selected_lines": [49, 38, 48, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 40, 41, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032520294189453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 48, 49, 43, 51, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 38, 49, 48, 51, 43, 47, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) == 0:\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 42, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032110214233398438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 51, 47, 39, 41, 48, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('The input must be a list.')\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 38, 51, 41, 47, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 49, 38, 45, 44, 41, 39, 40, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) == 0:\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 44, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 43, 42, 40, 39, 48, 47, 44, 38, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 48, 47, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 49, 48, 42, 47, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 44, 38, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 45, 43, 51, 44, 49, 47, 40, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 44, 39, 48, 41, 40, 47, 38, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 39, 43, 40, 44, 51, 48, 49, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 41, 43, 39, 51, 46, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError('array is not a list')\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 44, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 41, 39, 38, 46, 42, 43, 49, 48, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 40, 41, 49, 51, 46, 39, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 40, 38, 46, 44, 45, 49, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 41, 48, 45, 38, 46, 40, 49, 42, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 38, 49, 47, 40, 41, 43, 39, 42, 51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"The input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 41, 44, 46, 51, 48, 45, 38, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 43, 40, 48, 46, 44, 51, 39, 42, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 38, 42, 43, 45, 46, 44, 39, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008331775665283203, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0011172294616699219, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 39, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 51, 48, 40, 39, 44, 49, 43, 47, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 43, 46, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 41, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 45, 42, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 48, 46, 43, 40, 38, 47, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 45, 43, 44, 39, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 44, 42, 38, 39, 47, 49, 41, 45, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007596015930175781, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 47, 45, 49, 40, 43, 44, 51, 46, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 38, 47, 46, 51, 39, 48, 49, 41, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003276824951171875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 45, 51, 44, 43, 39, 48, 49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [48, 43, 40, 41, 39, 51, 38, 46, 44, 42, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 45, 38, 47, 46, 39, 41, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 45, 49, 48, 51, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 49, 44, 41, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 47, 51, 40, 41, 46, 38, 48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if not array:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 38, 40, 43, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39, 43, 51, 47, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 49, 41, 48, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 41, 49, 48, 42, 40, 45, 46, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 40, 48, 41, 38, 42, 47, 44, 51, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 51, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"input must be a list\")\n    if not array:\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 38, 45, 43, 42, 47, 39, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 42, 49, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033767223358154297, "tests_passed": true, "error": null}}
{"selected_lines": [40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) < 2:\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 46, 47, 51, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 47, 48, 41, 49, 40, 43, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 38, 41, 42, 40, 39, 47, 44, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 38, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 48, 44, 46, 38, 45, 42, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 49, 45, 47, 42, 38, 41, 40, 51, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 40, 41, 47, 48, 42, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 45, 48, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 43, 38, 49, 44, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007763862609863281, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 42, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 38, 39, 45, 40, 47, 43, 44, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 49, 47, 43, 44, 40, 41, 38, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010962486267089844, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032029151916503906, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 43, 44, 47, 42, 48, 40, 45, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"array should be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 38, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 46, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0035529136657714844, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 42, 51, 41, 40, 49, 47, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010700225830078125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 41, 47, 45, 39, 51, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 42, 47, 44, 41, 39, 51, 38, 46, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = []\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 43, 38, 42, 45, 49, 39, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 45, 49, 42, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 42, 40, 45, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032148361206054688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031769275665283203, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 48, 43, 51, 46, 42, 45, 49, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 44, 41, 48, 51, 45, 43, 39, 46, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError('array is not a list')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.00028324127197265625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033202171325683594, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.00010323524475097656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 40, 39, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032739639282226562, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007467031478881836, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 45, 51, 42, 38, 48, 49, 47, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 51, 44, 40, 46, 45, 41, 43, 42, 48, 49, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 2:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003226041793823242, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0067250728607177734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 48, 42, 39, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 49, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 46, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 40, 44, 48, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 41, 48, 40, 47, 49, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 46, 43, 51, 44, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003275156021118164, "tests_passed": true, "error": null}}
{"selected_lines": [51, 40, 41, 48, 49, 39, 43, 42, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 38, 44, 45, 46, 41, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 39, 42, 41, 48, 47, 45, 49, 44, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 42, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0037581920623779297, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 51, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 47, 43, 39, 49, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 47, 42, 44, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 42, 49, 40, 44, 41, 48, 46, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 45, 42, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 41, 47, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 43, 41, 44, 39, 47, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 44, 38, 43, 40, 47, 51, 39, 41, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"The input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 43, 51, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032482147216796875, "tests_passed": true, "error": null}}
{"selected_lines": [48, 38, 43, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 42, 39, 43, 41, 46, 38, 48, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 44, 39, 43, 41, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 42, 44, 45, 38, 49, 41, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032460689544677734, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 39, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 43, 40, 42, 38, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) < 1:\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 43, 51, 48, 39, 46, 38, 42, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 44, 51, 46, 47, 43, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 43, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 40, 47, 38, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 41, 47, 43, 51, 45, 44, 40, 42, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if not array:\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 43, 45, 48, 51, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 39, 51, 45, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 42, 45, 46, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 41, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 49, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032639503479003906, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 44, 38, 46, 45, 42, 48, 39, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 43, 39, 48, 49, 38, 41, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 46, 47, 49, 43, 41, 45, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 44, 49, 39, 42, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 42, 43, 38, 46, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 41, 43, 40, 39, 47, 51, 42, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 48, 49, 45, 43, 41, 39, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 39, 47, 38, 51, 48, 49, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) < 2:\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 38, 43, 46, 42, 40, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003228902816772461, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 46, 48, 43, 44, 45, 42, 51, 47, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 39, 45, 47, 38, 49, 44, 51, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"array should be a list\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 45, 49, 43, 41, 39, 51, 48, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 47, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031249523162841797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 39, 49, 48, 38, 40, 44, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 44, 48, 40, 51, 38, 39, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 51, 44, 39, 48, 45, 40, 41, 49, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"array should be a list\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003133058547973633, "tests_passed": true, "error": null}}
{"selected_lines": [38, 48, 40, 46, 41, 45, 47, 39, 44, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 39, 44, 42, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 43, 46, 42, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 40, 45, 41, 49, 48, 39, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 45, 39, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 38, 51, 45, 49, 40, 43, 42, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 39, 41, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 44, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 38, 41, 42, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 46, 51, 47, 43, 42, 39, 48, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031719207763671875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 46, 49, 44, 47, 45, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42, 48, 39, 49, 45, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not array:\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 46, 39, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032079219818115234, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032792091369628906, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 44, 42, 48, 41, 39, 46, 49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 40, 44, 39, 46, 42, 47, 38, 43, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 40, 38, 47, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 39, 47, 43, 41, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 38, 45, 40, 46, 48, 44, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError\n    if len(array) != len(array[0]):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008105039596557617, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 39, 45, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 41, 44, 38, 40, 47, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError('The input must be a list.')\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 39, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 40, 44, 38, 41, 43, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"input must be a list\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003165006637573242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 45, 47, 42, 38, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 46, 47, 51, 40, 44, 41, 42, 49, 45, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 40, 41, 45, 49, 38, 46, 42, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 51, 49, 38, 45, 40, 42, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 41, 44, 47, 40, 49, 48, 46, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003119230270385742, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 40, 38, 43, 46, 47, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"array should be a list\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 44, 45, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 42, 49, 44, 38, 45, 48, 46, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not isinstance(array[0], list):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 48, 46, 45, 38, 41, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 42, 51, 41, 38, 49, 47, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 46, 49, 43, 47, 48, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 41, 42, 49, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 45, 43, 51, 42, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032320022583007812, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 38, 40, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input should be a list of list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 39, 45, 42, 51, 48, 41, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.010779142379760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [46, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 43, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 49, 45, 40, 41, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 39, 38, 48, 51, 46, 44, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError\n    if len(array) < 2:\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 48, 43, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 42, 40, 47, 45, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) == 0:\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 42, 45, 40, 48, 39, 46, 47, 51, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if len(array) == 0:\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 45, 38, 46, 49, 48, 41, 43, 51, 42, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 42, 47, 48, 51, 41, 38, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 45, 42, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 44, 48, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 43, 40, 48, 51, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not array:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 41, 46, 48, 39, 40, 49, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 40, 39, 49, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 43, 39, 47, 49, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError('The input must be a list.')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 40, 41, 38, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 41, 45, 40, 39, 43, 51, 42, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 38, 39, 46, 44, 40, 48, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 47, 45, 46, 44, 38, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 38, 46, 42, 39, 51, 43, 40, 41, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 39, 38, 45, 51, 42, 44, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not isinstance(array[0], list):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 45, 40, 49, 41, 43, 42, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 48, 51, 43, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 51, 41, 40, 47, 45, 39, 43, 38, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError('The input must be a list.')\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 44, 51, 43, 39, 41, 42, 49, 47, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 38, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError('The input must be a list.')\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 40, 49, 41, 39, 47, 44, 45, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031533241271972656, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0030519962310791016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 51, 41, 46, 43, 48, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 42, 40, 51, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0030951499938964844, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 39, 40, 46, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 45, 46, 39, 51, 40, 44, 49, 41, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031270980834960938, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 38, 43, 39, 51, 48, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 45, 46, 41, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 46, 38, 40, 45, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 44, 38, 49, 46, 45, 51, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 48, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 39, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003434896469116211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 40, 43, 48, 41, 42, 45, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 44, 47, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 43, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032339096069335938, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 39, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 43, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 43, 48, 42, 40, 41, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003345966339111328, "tests_passed": true, "error": null}}
{"selected_lines": [49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032699108123779297, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 39, 51, 48, 41, 46, 38, 40, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032660961151123047, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 41, 39, 44, 48, 51, 49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 49, 44, 41, 39, 47, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 38, 44, 43, 42, 48, 39, 40, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"input must be a list\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003180980682373047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41, 43, 38, 42, 49, 45, 48, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.00028324127197265625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 48, 47, 43, 38, 45, 51, 46, 42, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 49, 39, 43, 42, 44, 47, 45, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 40, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 49, 38, 39, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('array is not a list')\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 46, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 41, 49, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031468868255615234, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 38, 46, 48, 43, 42, 45, 51, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 47, 44, 49, 40, 38, 48, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a list of lists\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 39, 38, 44, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 39, 49, 40, 46, 41, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 43, 40, 46, 44, 47, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 41, 38, 47, 40, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032219886779785156, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0075190067291259766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008331775665283203, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 40, 42, 51, 49, 46, 43, 44, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError('array is not a list')\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 47, 40, 38, 42, 44, 45, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 40, 47, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 43, 45, 46, 42, 41, 49, 51, 48, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010380744934082031, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 48, 47, 51, 43, 42, 39, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input is not a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 40, 42, 45, 51, 47, 41, 39, 46, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 43, 44, 41, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 38, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError('The input must be a list.')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 49, 42, 45, 39, 38, 47, 46, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not array:\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 51, 39, 48, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 38, 48, 51, 41, 45, 39, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 39, 44, 49, 40, 48, 43, 38, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 46, 43, 45, 49, 51, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007407665252685547, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 39, 46, 47, 45, 38, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0066759586334228516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010213851928710938, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 41, 46, 44, 42, 48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 44, 40, 48, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 38, 49, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 40, 39, 44, 51, 47, 48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 48, 44, 38, 49, 41, 43, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 48, 43, 44, 42, 41, 46, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 39, 46, 43, 38, 45, 48, 41, 51, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 1 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 42, 41, 43, 51, 45, 47, 49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 38, 44, 45, 46, 43, 39, 48, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 45, 49, 47, 44, 40, 39, 42, 48, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 46, 47, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 48, 42, 40, 46, 44, 49, 41, 51, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 38, 39, 44, 49, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 47, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003200054168701172, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 45, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 51, 40, 44, 48, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('array is not a list')\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 39, 42, 43, 44, 41, 51, 45, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [51, 38, 40, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 48, 49, 42, 41, 43, 51, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 46, 39, 43, 38, 47, 41, 45, 42, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 38, 49, 39, 45, 47, 41, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 48, 49, 45, 40, 42, 44, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 47, 39, 49, 48, 45, 41, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 42, 49, 47, 51, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 39, 40, 49, 42, 44, 43, 48, 47, 46, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"The input must be a list of lists\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007236957550048828, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 38, 41, 49, 51, 48, 39, 40, 43, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input should be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 39, 49, 45, 43, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0010390281677246094, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 39, 43, 45, 51, 48, 42, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 47, 48, 46, 44, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 51, 38, 42, 49, 44, 39, 45, 41, 43, 48, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 40, 46, 41, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 51, 47, 40, 43, 44, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 39, 43, 49, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.010596990585327148, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 38, 48, 45, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 51, 41, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.00745701789855957, "tests_passed": true, "error": null}}
{"selected_lines": [40, 48, 46, 45, 51, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 48, 49, 51, 38, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 45, 44, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 40, 51, 46, 38, 43, 48, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 49, 39, 46, 48, 42, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007746219635009766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 43, 41, 49, 47, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) == 0:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 48, 40, 39, 51, 47, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 48, 39, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 45, 44, 51, 48, 43, 49, 41, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 48, 38, 46, 43, 47, 41, 51, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.011799097061157227, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [49, 39, 51, 43, 45, 42, 40, 47, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('The input must be a list.')\n    if not isinstance(array[0], list):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 49, 42, 48, 41, 44, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 46, 40, 47, 39, 44, 42, 38, 45, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, index=range(len(array)))\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 48, 42, 38, 45, 47, 49, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 41, 48, 51, 43, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 49, 51, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 39, 48, 49, 40, 44, 46, 43, 38, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError\n    if len(array) != len(array[0]):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 47, 44, 38, 42, 41, 43, 49, 45, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 38, 46, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033092498779296875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 51, 48, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 51, 40, 44, 47, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sublist) == len(array[0]) for sublist in array):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 46, 48, 51, 40, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 49, 44, 42, 38, 46, 47, 43, 45, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 47, 42, 43, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 47, 40, 44, 38, 45, 42, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input should be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 48, 47, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 46, 39, 47, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 51, 46, 41, 42, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"List must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 45, 47, 38, 49, 51, 41, 42, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008331775665283203, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008085966110229492, "tests_passed": true, "error": null}}
{"selected_lines": [48, 38, 39, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must contain lists only.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 43, 44, 38, 48, 42, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError('The input must be a list.')\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 45, 47, 49, 38, 51, 41, 40, 46, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 51, 46, 49, 44, 41, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.012021064758300781, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [45, 42, 48, 46, 51, 44, 49, 38, 40, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist must contain only integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 38, 39, 40, 46, 48, 51, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 40, 51, 44, 42, 49, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 44, 47, 40, 42, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 40, 38, 49, 41, 51, 39, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"array should be a list\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 49, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 42, 49, 40, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 41, 46, 48, 49, 38, 44, 51, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError('array is not a list')\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 44, 48, 42, 45, 51, 41, 47, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 40, 45, 42, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44, 45, 48, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007800102233886719, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 42, 49, 39, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 41, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Array must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 42, 51, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 47, 41, 40, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 44, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 39, 49, 43, 42, 45, 40, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 51, 43, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 49, 40, 47, 41, 45, 42, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 41, 42, 43, 44, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists\")\n    if len(array) == 0:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 44, 45, 42, 48, 39, 51, 49, 47, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 49, 40, 38, 51, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError('The input must be a list.')\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 48, 46, 44, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 42, 45, 44, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"The input must be a list.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 40, 42, 38, 43, 49, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031440258026123047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 39, 46, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 51, 49, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 39, 45, 51, 41, 47, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 38, 40, 51, 43, 45, 46, 42, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError('array is not a list')\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 44, 39, 45, 46, 48, 42, 41, 49, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007332801818847656, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 45, 42, 38, 46, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031349658966064453, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 38, 40, 44, 51, 39, 43, 42, 47, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (isinstance(array, list) and all(isinstance(row, list) for row in array)):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 43, 46, 42, 38, 41, 39, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(squareform(df.values), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 43, 47, 48, 39, 46, 40, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"Input is not a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 40, 47, 43, 44, 46, 42, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47, 42, 40, 45, 41, 51, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not array:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 49, 39, 43, 47, 44, 42, 38, 51, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 47, 46, 38, 49, 39, 45, 43, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 48, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 46, 45, 38, 49, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 43, 48, 41, 39, 51, 42, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007665157318115234, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48, 44, 40, 51, 45, 42, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 39, 40, 41, 49, 43, 38, 48, 51, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 49, 44, 39, 40, 47, 38, 41, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(num, int) or isinstance(num, float) for num in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 42, 46, 44, 48, 45, 49, 38, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 49, 45, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": false, "time": 0.00028324127197265625, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [43, 51, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003365039825439453, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 38, 43, 40, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(i, int) or isinstance(i, float) for i in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 51, 48, 38, 47, 40, 45, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007763862609863281, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0034439563751220703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 48, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 38, 51, 45, 46, 42, 41, 44, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 42, 48, 51, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 38, 39, 51, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"List must only contain numbers.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 47, 45, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 48, 45, 41, 39, 44, 42, 43, 46, 38, 47, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(f\"Input {array} must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033228397369384766, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 47, 44, 48, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Elements of the input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All values in the list must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 42, 44, 40, 39, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031578540802001953, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 47, 39, 44, 48, 41, 38, 40, 43, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007354021072387695, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 45, 48, 42, 38, 43, 39, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 39, 46, 41, 44, 47, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list of lists\")\n    if len(array) < 1:\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.010779142379760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 40, 38, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 38, 39, 41, 45, 49, 42, 51, 44, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All the sublists in the 2D list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 49, 43, 39, 45, 51, 48, 44, 47, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032198429107666016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 48, 43, 49, 40, 46, 39, 41, 42, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not isinstance(array[0], list) or not all(isinstance(item, int) or isinstance(item, float) for sublist in array for item in sublist):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"Input must be a list of lists containing only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 40, 51, 47, 39, 46, 44, 45, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Each element in sublist must be an integer or a float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 41, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 42, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input is not a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 42, 47, 41, 40, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 43, 41, 39, 49, 48, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list:\n        raise TypeError(\"Input should be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008105039596557617, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 49, 39, 51, 45, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0033071041107177734, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(x, (int, float)) for x in sublist) for sublist in array):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 47, 44, 46, 43, 41, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if isinstance(array, list) and all(isinstance(row, list) for row in array) and all(\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Elements of input list must be lists.\")\n    for sublist in array:\n        if not all(isinstance(x, (int, float)) for x in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031480789184570312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 51, 39, 43, 42, 40, 47, 44, 48, 38, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input should be a list.\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, (int, float)) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 39, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 38, 39, 43, 47, 40, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not (\n        raise TypeError(\"input must be a list\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 46, 40, 47, 48, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"input must be a list\")\n    if len(array) == 0:\n        raise TypeError(\"Each sublist must contain only integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031349658966064453, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 41, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(len(sub_list) == len(array[0]) for sub_list in array):\n        raise TypeError(\"All items in input must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42, 51, 46, 44, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032320022583007812, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not array or not array[0] or not all([isinstance(elem, (int, float)) for elem in array[0]]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.011225700378417969, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [44, 41, 42, 40, 38, 43, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 47, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=array.copy(), columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 43, 40, 51, 46, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list.\")\n    if all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements of the input must be either integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 41, 46, 38, 44, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 1:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 40, 42, 45, 47, 44, 41, 51, 48, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A')+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 46, 43, 41, 40, 45, 39, 48, 42, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input should be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 48, 46, 51, 43, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist must contain integers or floats.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 38, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(elem, (int, float)) for elem in row) for row in array):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(array, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 48, 41, 46, 39, 49, 38, 40, 51, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(all(isinstance(value, (int, float)) for value in sublist) for sublist in array):\n        raise TypeError(\"Input list must only contain lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances, checks=False), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each element in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 38, 45, 51, 48, 47, 46, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All sublists must contain only integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 42, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 47, 42, 45, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sub-lists must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(pd.DataFrame(df)))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 44, 42, 43, 51, 39, 45, 47, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list of lists\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 45, 39, 44, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric=\"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 39, 38, 49, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 44, 41, 42, 51, 48, 45, 49, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"Input list must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 46, 39, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 38, 51, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 44, 38, 42, 49, 48, 47, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if len(array) != 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"Elements must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, \"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 51, 46, 38, 49, 42, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not isinstance(array[0], list):\n        raise TypeError(\"array should be a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 43, 42, 51, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(value, (int, float)) for value in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), 'euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(x, list) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0032820701599121094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 41, 46, 44, 38, 45, 40, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a 2D list.\")\n    if len(array) < 1:\n        raise TypeError(\"List elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 39, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(df), \"euclidean\"))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.008105039596557617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 46, 48, 39, 42, 51, 44, 47, 41, 49, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(x, (int, float)) for row in array for x in row):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(i+65) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 45, 44, 42, 47, 39, 51, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"Elements of sublists must be integers or floats.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 44, 51, 42, 40, 47, 43, 49, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not match the required type.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must only contain integer or float values.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 49, 46, 42, 47, 51, 43, 48, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) < 2:\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 45, 47, 46, 42, 48, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(x, int) or isinstance(x, float) for x in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0031120777130126953, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 43, 51, 41, 48, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 39, 45, 40, 44, 41, 51, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if len(array) == 0:\n        raise TypeError(\"Input must contain only lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Sublists must contain only integers or floats.\")\n    columns = [chr(97+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 42, 48, 49, 41, 51, 45, 47, 43, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input should be a list of lists.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.to_numpy(), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 47, 38, 42, 39, 41, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(isinstance(item, (int, float)) for item in array):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Every element in the array must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Items in sublist must be integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array should be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all([isinstance(row, list) for row in array]):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 43, 40, 46, 41, 47, 51, 48, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Input must be a list of lists of integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, metric=\"euclidean\"))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 41, 43, 49, 46, 45, 40, 38, 47, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or not array:\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Sub-list in the list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(97 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(array, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 43, 45, 46, 38, 42, 41, 44, 39, 47, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(subarray, list) for subarray in array):\n        raise TypeError(\"The input must be a list of lists\")\n    if not isinstance(array[0], list):\n        raise TypeError(\"All elements must be lists.\")\n    for sublist in array:\n        if not all(isinstance(num, (int, float)) for num in sublist):\n            raise TypeError(\"Each item of sublist must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 39, 47, 43, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list, but you inputted\", type(array))\n    if not isinstance(array[0], list):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Elements of lists must be integers or floats.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 46, 44, 49, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each sublist in the input must contain only integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.003119945526123047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 46, 49], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input should be a list of lists of int or float.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 45, 46, 38, 51, 48, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All sublists must be lists.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord(\"A\") + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 42, 41, 44, 51, 48, 38, 40, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = []\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df, 'euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances), index=columns, columns=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 38, 44, 49, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(elem, list) for elem in array):\n        raise TypeError(\"Input must be a list.\")\n    if not array:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"Each element of the list must be an integer or a float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 44, 38, 48, 39, 43, 47, 41, 40, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if type(array) != list or len(array) != 2 or any([len(array[i]) != len(array[j]) for i in range(len(array)) for j in range(i+1, len(array))]):\n        raise TypeError(f\"Input must be a list, but received {type(array)}.\")\n    if len(array) != len(array[0]):\n        raise TypeError(\"Input must be a 2D list.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"Inner list must only contain integers or floats.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.values))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 45, 44, 39, 41, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, int | float) for item in sublist):\n            raise TypeError(\"The elements of each sublist must be int or float.\")\n    columns = [chr(ord(\"A\")+i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 48, 38, 46, 42, 51, 45], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"All elements of input list must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i + ord('A')) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, index=range(len(array)), columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 49, 45, 47, 40, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if len(array) == 0 or len(array) == 1:\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df.values, 'euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances),\n    )\n    return df, distance_matrix<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42, 46, 38, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list) or any(not isinstance(x, (list, tuple)) for x in array):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Each sublist in the input must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(elem, (int, float)) for elem in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 46, 49, 47, 45, 40, 42, 38, 41, 48], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input does not meet requirements: array must be a list.\")\n    if not all(isinstance(sub_list, list) for sub_list in array):\n        raise TypeError(\"Input list must be nested list.\")\n    for sublist in array:\n        if not all(isinstance(item, int) or isinstance(item, float) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(ord('A') + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns, dtype='int')\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = squareform(distances)\n        squareform(distances, check_finite=False), columns=columns, index=columns\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Each sublist must be a list.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.007826805114746094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 43, 48, 51], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(element, int | float) for element in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(np.array(array), metric='euclidean'))\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 48, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"The input must be a 2D list.\")\n    if not all(isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(df.values, metric=\"euclidean\")\n    distance_matrix = squareform(distances)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) == 0 or any(not isinstance(row, list) for row in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(array), metric='euclidean')\n    distance_matrix = pd.DataFrame(\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 51, 39], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not isinstance(array, list):\n        raise TypeError(\"array is not a list\")\n    if not all(isinstance(sublist, list) for sublist in array):\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = pdist(squareform(df.to_numpy()), metric=\"euclidean\")\n    distance_matrix = pd.DataFrame(\n        squareform(distances), columns=columns, index=columns\n    )\n    return df, distance_matrix<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 51, 48, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy.spatial.distance import pdist, squareform\n\n\ndef task_func(array):\n    \"\"\"\n    Generate a Pandas DataFrame from a 2D list and calculate a distance matrix.\n\n    This function converts a 2D list into a DataFrame, with columns named alphabetically starting from 'A'.\n    It uses the `chr()` function, which converts an integer to its corresponding Unicode character,\n    to dynamically assign alphabetical labels to each column based on their index. The function then\n    computes the Euclidean distance matrix between rows.\n\n    Parameters:\n    array (list of list of int): The 2D list representing the data.\n                                 Each sublist must contain only integers or floats. If the input does not\n                                 conform to this structure, a TypeError is raised.\n\n    Returns:\n    - df (pd.DataFrame): data converted from 2D list.\n    - distance_matrix (pd.DataFrame): output distance matrix.\n\n    Requirements:\n    - pandas\n    - scipy.spatial.distance.pdist\n    - scipy.spatial.distance.squareform\n\n    Example:\n    >>> df, distance_matrix = task_func([[1,2,3,4,5], [6,7,8,9,10]])\n    >>> print(df)\n       A  B  C  D   E\n    0  1  2  3  4   5\n    1  6  7  8  9  10\n    >>> print(distance_matrix)\n              0         1\n    0   0.00000  11.18034\n    1  11.18034   0.00000\n    \"\"\"\n    if not all(all(isinstance(element, (int, float)) for element in row) for row in array):\n        raise TypeError(\"Input must be a list.\")\n    if len(array) < 2:\n        raise TypeError(\"Input must be a list of lists.\")\n    for sublist in array:\n        if not all(isinstance(item, (int, float)) for item in sublist):\n            raise TypeError(\"All elements in the sublists must be int or float.\")\n    columns = [chr(65 + i) for i in range(len(array[0]))]\n    df = pd.DataFrame(array, columns=columns)\n    distances = squareform(pdist(df, 'euclidean'))\n    distance_matrix = pd.DataFrame(squareform(distances), columns=columns, index=columns)\n        squareform(distances), index=df.index, columns=df.index\n    )\n    return df, distance_matrix", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
